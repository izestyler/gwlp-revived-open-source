Table has 482 entries

Packet 0x0000
	TemplateSize: 2

	Template: 0x00000000 0x00000404 

	DecodedTemplate: 
	struct Packet_0x0
	{
		const short Header = 0x0;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x0040CB70


Packet 0x0001
	TemplateSize: 1

	Template: 0x00000001 

	DecodedTemplate: 
	struct Packet_0x1
	{
		const short Header = 0x1;		//Size in Packet: 4 bytes
	}


	Handler: 0x0040CB10


Packet 0x0002
	TemplateSize: 2

	Template: 0x00000002 0x00000404 

	DecodedTemplate: 
	struct Packet_0x2
	{
		const short Header = 0x2;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x0040CB60


Packet 0x0003
	TemplateSize: 5

	Template: 0x00000003 0x00000404 0x00000404 0x00010017 
		0x00010017 

	DecodedTemplate: 
	struct Packet_0x3
	{
		const short Header = 0x3;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 256		//Size in Packet: 4 bytes
		wchar_t[256]		//Size in Packet: 2 * string_length bytes
		//short string_length;	//MaxLength: 256		//Size in Packet: 4 bytes
		wchar_t[256]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x0040CBB0


Packet 0x0004
	TemplateSize: 4

	Template: 0x00000004 0x00000204 0x00000204 0x00000204 

	DecodedTemplate: 
	struct Packet_0x4
	{
		const short Header = 0x4;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
	}


	Handler: 0x0078CD90


Packet 0x0005
	TemplateSize: 2

	Template: 0x00000005 0x00000104 

	DecodedTemplate: 
	struct Packet_0x5
	{
		const short Header = 0x5;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x0078CDC0


Packet 0x0006
	TemplateSize: 2

	Template: 0x00000006 0x00000204 

	DecodedTemplate: 
	struct Packet_0x6
	{
		const short Header = 0x6;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
	}


	Handler: 0x0078CDF0


Packet 0x0007
	TemplateSize: 2

	Template: 0x00000007 0x00000204 

	DecodedTemplate: 
	struct Packet_0x7
	{
		const short Header = 0x7;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
	}


	Handler: 0x0078CE20


Packet 0x0008
	TemplateSize: 2

	Template: 0x00000008 0x00000104 

	DecodedTemplate: 
	struct Packet_0x8
	{
		const short Header = 0x8;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x0078CE50


Packet 0x0009
	TemplateSize: 4

	Template: 0x00000009 0x00000104 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0x9
	{
		const short Header = 0x9;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x0078CE70


Packet 0x000A
	TemplateSize: 3

	Template: 0x0000000A 0x00000104 0x00000404 

	DecodedTemplate: 
	struct Packet_0xa
	{
		const short Header = 0xa;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x0078CEA0


Packet 0x000B
	TemplateSize: 2

	Template: 0x0000000B 0x00007A17 

	DecodedTemplate: 
	struct Packet_0xb
	{
		const short Header = 0xb;		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 122		//Size in Packet: 4 bytes
		wchar_t[122]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x0078CED0


Packet 0x000C
	TemplateSize: 6

	Template: 0x0000000C 0x00000104 0x00000104 0x00000404 
		0x00000404 0x00000104 

	DecodedTemplate: 
	struct Packet_0xc
	{
		const short Header = 0xc;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x0078CEF0


Packet 0x000D
	TemplateSize: 3

	Template: 0x0000000D 0x0000082B 0x00000006 

	DecodedTemplate: 
	struct Packet_0xd
	{
		const short Header = 0xd;		//Size in Packet: 4 bytes
		short length;	//MaxLength: 8		//Size in Packet: 4 bytes
		DWORD[length]	//MaxLength: 8		//Size in Packet: 4 * length bytes MaxSize in Packet: 32bytes
	}


	Handler: 0x0078CF30


Packet 0x000E
	TemplateSize: 5

	Template: 0x0000000E 0x00000204 0x00000104 0x0000400C 
		0x00000404 

	DecodedTemplate: 
	struct Packet_0xe
	{
		const short Header = 0xe;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE ArraySize;	//MaxSize: 64		//Size in Packet: 4 bytes
		DWORD[ArraySize]	//Mask: 0xffffffff		//Size in Packet: 4 bytes / element
	}


	Handler: 0x0078CF60


Packet 0x000F
	TemplateSize: 4

	Template: 0x0000000F 0x00000204 0x0000400C 0x00000404 

	DecodedTemplate: 
	struct Packet_0xf
	{
		const short Header = 0xf;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE ArraySize;	//MaxSize: 64		//Size in Packet: 4 bytes
		DWORD[ArraySize]	//Mask: 0xffffffff		//Size in Packet: 4 bytes / element
	}


	Handler: 0x0078CFC0


Packet 0x0010
	TemplateSize: 1

	Template: 0x00000010 

	DecodedTemplate: 
	struct Packet_0x10
	{
		const short Header = 0x10;		//Size in Packet: 4 bytes
	}


	Handler: 0x0078D020


Packet 0x0011
	TemplateSize: 3

	Template: 0x00000011 0x00000204 0x00000104 

	DecodedTemplate: 
	struct Packet_0x11
	{
		const short Header = 0x11;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x0078D040


Packet 0x0012
	TemplateSize: 3

	Template: 0x00000012 0x0000802B 0x00000006 

	DecodedTemplate: 
	struct Packet_0x12
	{
		const short Header = 0x12;		//Size in Packet: 4 bytes
		short length;	//MaxLength: 128		//Size in Packet: 4 bytes
		DWORD[length]	//MaxLength: 128		//Size in Packet: 4 * length bytes MaxSize in Packet: 512bytes
	}


	Handler: 0x0078D070


Packet 0x0013
	TemplateSize: 2

	Template: 0x00000013 0x00000404 

	DecodedTemplate: 
	struct Packet_0x13
	{
		const short Header = 0x13;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x005D0B33


Packet 0x0014
	TemplateSize: 2

	Template: 0x00000014 0x00000404 

	DecodedTemplate: 
	struct Packet_0x14
	{
		const short Header = 0x14;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x005D0BCF


Packet 0x0015
	TemplateSize: 24

	Template: 0x00000015 0x00000404 0x00000404 0x00000104 
		0x00000104 0x00000012 0x00000204 0x00000002 0x00000104 
		0x00000021 0x00000001 0x00000404 0x00000404 
		0x00000404 0x00000404 0x00000404 0x00000404 
		0x00000404 0x00000002 0x00000012 0x00000204 
		0x00000404 0x00000012 0x00000204 

	DecodedTemplate: 
	struct Packet_0x15
	{
		const short Header = 0x15;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		float		//Size in Packet: 4 bytes
		float		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		float		//Size in Packet: 4 bytes
		float		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		float		//Size in Packet: 4 bytes
		float		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		float		//Size in Packet: 4 bytes
		float		//Size in Packet: 4 bytes
		float		//Size in Packet: 4 bytes
		float		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		float		//Size in Packet: 4 bytes
		float		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
	}


	Handler: 0x005D0C2E


Packet 0x0016
	TemplateSize: 2

	Template: 0x00000016 0x00000404 

	DecodedTemplate: 
	struct Packet_0x16
	{
		const short Header = 0x16;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x005D0DC9


Packet 0x0017
	TemplateSize: 3

	Template: 0x00000017 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0x17
	{
		const short Header = 0x17;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x005D0E43


Packet 0x0018
	TemplateSize: 3

	Template: 0x00000018 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0x18
	{
		const short Header = 0x18;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x005D0EB9


Packet 0x0019
	TemplateSize: 3

	Template: 0x00000019 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0x19
	{
		const short Header = 0x19;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x005D0F38


Packet 0x001A
	TemplateSize: 4

	Template: 0x0000001A 0x00000404 0x00000002 0x00000104 

	DecodedTemplate: 
	struct Packet_0x1a
	{
		const short Header = 0x1a;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		float		//Size in Packet: 4 bytes
		float		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x005D0FF0


Packet 0x001B
	TemplateSize: 3

	Template: 0x0000001B 0x00000404 0x00000104 

	DecodedTemplate: 
	struct Packet_0x1b
	{
		const short Header = 0x1b;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x005D10C8


Packet 0x001C
	TemplateSize: 3

	Template: 0x0000001C 0x00000404 0x00000021 

	DecodedTemplate: 
	struct Packet_0x1c
	{
		const short Header = 0x1c;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		float		//Size in Packet: 4 bytes
	}


	Handler: 0x005D1180


Packet 0x001D
	TemplateSize: 2

	Template: 0x0000001D 0x00000404 

	DecodedTemplate: 
	struct Packet_0x1d
	{
		const short Header = 0x1d;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x005D1240


Packet 0x001E
	TemplateSize: 5

	Template: 0x0000001E 0x00000404 0x00000012 0x00000204 
		0x00000204 

	DecodedTemplate: 
	struct Packet_0x1e
	{
		const short Header = 0x1e;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		float		//Size in Packet: 4 bytes
		float		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
	}


	Handler: 0x005D12F0


Packet 0x001F
	TemplateSize: 6

	Template: 0x0000001F 0x00000404 0x00000012 0x00000204 
		0x00000204 0x00000404 

	DecodedTemplate: 
	struct Packet_0x1f
	{
		const short Header = 0x1f;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		float		//Size in Packet: 4 bytes
		float		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x005D1390


Packet 0x0020
	TemplateSize: 4

	Template: 0x00000020 0x00000404 0x00000001 0x00000104 

	DecodedTemplate: 
	struct Packet_0x20
	{
		const short Header = 0x20;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		float		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x005D1431


Packet 0x0021
	TemplateSize: 4

	Template: 0x00000021 0x00000404 0x00000012 0x00000204 

	DecodedTemplate: 
	struct Packet_0x21
	{
		const short Header = 0x21;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		float		//Size in Packet: 4 bytes
		float		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
	}


	Handler: 0x005D14A5


Packet 0x0022
	TemplateSize: 2

	Template: 0x00000022 0x00000404 

	DecodedTemplate: 
	struct Packet_0x22
	{
		const short Header = 0x22;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x005D15B8


Packet 0x0023
	TemplateSize: 4

	Template: 0x00000023 0x00000404 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0x23
	{
		const short Header = 0x23;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x005D167A


Packet 0x0024
	TemplateSize: 3

	Template: 0x00000024 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0x24
	{
		const short Header = 0x24;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x005D175A


Packet 0x0025
	TemplateSize: 8

	Template: 0x00000025 0x00002017 0x00000404 0x00000404 
		0x00000404 0x00000404 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0x25
	{
		const short Header = 0x25;		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 32		//Size in Packet: 4 bytes
		wchar_t[32]		//Size in Packet: 2 * string_length bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00885080


Packet 0x0026
	TemplateSize: 2

	Template: 0x00000026 0x00002017 

	DecodedTemplate: 
	struct Packet_0x26
	{
		const short Header = 0x26;		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 32		//Size in Packet: 4 bytes
		wchar_t[32]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x008850B0


Packet 0x0027
	TemplateSize: 7

	Template: 0x00000027 0x00000404 0x00000404 0x00000404 
		0x00000404 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0x27
	{
		const short Header = 0x27;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x008850C0


Packet 0x0028
	TemplateSize: 2

	Template: 0x00000028 0x00004017 

	DecodedTemplate: 
	struct Packet_0x28
	{
		const short Header = 0x28;		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 64		//Size in Packet: 4 bytes
		wchar_t[64]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x008850F0


Packet 0x0029
	TemplateSize: 3

	Template: 0x00000029 0x00000204 0x00000010 

	DecodedTemplate: 
	struct Packet_0x29
	{
		const short Header = 0x29;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
	}


	Handler: 0x00885100


Packet 0x002A
	TemplateSize: 4

	Template: 0x0000002A 0x00000010 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0x2a
	{
		const short Header = 0x2a;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00885120


Packet 0x002B
	TemplateSize: 3

	Template: 0x0000002B 0x00000010 0x00000404 

	DecodedTemplate: 
	struct Packet_0x2b
	{
		const short Header = 0x2b;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00885140


Packet 0x002C
	TemplateSize: 4

	Template: 0x0000002C 0x00000010 0x00000104 0x00000104 

	DecodedTemplate: 
	struct Packet_0x2c
	{
		const short Header = 0x2c;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x00885160


Packet 0x002D
	TemplateSize: 3

	Template: 0x0000002D 0x00000010 0x00000104 

	DecodedTemplate: 
	struct Packet_0x2d
	{
		const short Header = 0x2d;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x00885180


Packet 0x002E
	TemplateSize: 3

	Template: 0x0000002E 0x00000010 0x00000104 

	DecodedTemplate: 
	struct Packet_0x2e
	{
		const short Header = 0x2e;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x008851A0


Packet 0x002F
	TemplateSize: 4

	Template: 0x0000002F 0x00000010 0x0000302B 0x00000006 

	DecodedTemplate: 
	struct Packet_0x2f
	{
		const short Header = 0x2f;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		short length;	//MaxLength: 48		//Size in Packet: 4 bytes
		DWORD[length]	//MaxLength: 48		//Size in Packet: 4 * length bytes MaxSize in Packet: 192bytes
	}


	Handler: 0x008851C0


Packet 0x0030
	TemplateSize: 5

	Template: 0x00000030 0x00000010 0x00000104 0x00000104 
		0x00000104 

	DecodedTemplate: 
	struct Packet_0x30
	{
		const short Header = 0x30;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x008851F0


Packet 0x0031
	TemplateSize: 5

	Template: 0x00000031 0x00000817 0x00008017 0x00000104 
		0x00000404 

	DecodedTemplate: 
	struct Packet_0x31
	{
		const short Header = 0x31;		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 8		//Size in Packet: 4 bytes
		wchar_t[8]		//Size in Packet: 2 * string_length bytes
		//short string_length;	//MaxLength: 128		//Size in Packet: 4 bytes
		wchar_t[128]		//Size in Packet: 2 * string_length bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00885210


Packet 0x0032
	TemplateSize: 2

	Template: 0x00000032 0x00000010 

	DecodedTemplate: 
	struct Packet_0x32
	{
		const short Header = 0x32;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
	}


	Handler: 0x00885230


Packet 0x0033
	TemplateSize: 6

	Template: 0x00000033 0x00000010 0x00000010 0x00000204 
		0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0x33
	{
		const short Header = 0x33;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00885240


Packet 0x0034
	TemplateSize: 3

	Template: 0x00000034 0x00000010 0x00000404 

	DecodedTemplate: 
	struct Packet_0x34
	{
		const short Header = 0x34;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00885260


Packet 0x0035
	TemplateSize: 6

	Template: 0x00000035 0x00000010 0x00000010 0x00000204 
		0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0x35
	{
		const short Header = 0x35;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00885280


Packet 0x0036
	TemplateSize: 6

	Template: 0x00000036 0x00000010 0x00000204 0x00000404 
		0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0x36
	{
		const short Header = 0x36;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x008852A0


Packet 0x0037
	TemplateSize: 5

	Template: 0x00000037 0x00000010 0x00000404 0x00000404 
		0x00000404 

	DecodedTemplate: 
	struct Packet_0x37
	{
		const short Header = 0x37;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x008852C0


Packet 0x0038
	TemplateSize: 3

	Template: 0x00000038 0x00000010 0x00000404 

	DecodedTemplate: 
	struct Packet_0x38
	{
		const short Header = 0x38;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x008852E0


Packet 0x0039
	TemplateSize: 3

	Template: 0x00000039 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0x39
	{
		const short Header = 0x39;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00885300


Packet 0x003A
	TemplateSize: 4

	Template: 0x0000003A 0x00000404 0x00000404 0x00000010 

	DecodedTemplate: 
	struct Packet_0x3a
	{
		const short Header = 0x3a;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
	}


	Handler: 0x00885320


Packet 0x003B
	TemplateSize: 5

	Template: 0x0000003B 0x00000404 0x00000404 0x00000012 
		0x00000204 

	DecodedTemplate: 
	struct Packet_0x3b
	{
		const short Header = 0x3b;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		float		//Size in Packet: 4 bytes
		float		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00885340


Packet 0x003C
	TemplateSize: 3

	Template: 0x0000003C 0x00000010 0x00000104 

	DecodedTemplate: 
	struct Packet_0x3c
	{
		const short Header = 0x3c;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x00885380


Packet 0x003D
	TemplateSize: 10

	Template: 0x0000003D 0x00000404 0x00000012 0x00000204 
		0x00000204 0x00000404 0x00000817 0x00000817 0x00000817 
		0x00000204 

	DecodedTemplate: 
	struct Packet_0x3d
	{
		const short Header = 0x3d;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		float		//Size in Packet: 4 bytes
		float		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 8		//Size in Packet: 4 bytes
		wchar_t[8]		//Size in Packet: 2 * string_length bytes
		//short string_length;	//MaxLength: 8		//Size in Packet: 4 bytes
		wchar_t[8]		//Size in Packet: 2 * string_length bytes
		//short string_length;	//MaxLength: 8		//Size in Packet: 4 bytes
		wchar_t[8]		//Size in Packet: 2 * string_length bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
	}


	Handler: 0x008853A0


Packet 0x003E
	TemplateSize: 2

	Template: 0x0000003E 0x00000404 

	DecodedTemplate: 
	struct Packet_0x3e
	{
		const short Header = 0x3e;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x008853F0


Packet 0x003F
	TemplateSize: 3

	Template: 0x0000003F 0x0000402B 0x00000006 

	DecodedTemplate: 
	struct Packet_0x3f
	{
		const short Header = 0x3f;		//Size in Packet: 4 bytes
		short length;	//MaxLength: 64		//Size in Packet: 4 bytes
		DWORD[length]	//MaxLength: 64		//Size in Packet: 4 * length bytes MaxSize in Packet: 256bytes
	}


	Handler: 0x00885400


Packet 0x0040
	TemplateSize: 4

	Template: 0x00000040 0x00000404 0x00008017 0x00008017 

	DecodedTemplate: 
	struct Packet_0x40
	{
		const short Header = 0x40;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 128		//Size in Packet: 4 bytes
		wchar_t[128]		//Size in Packet: 2 * string_length bytes
		//short string_length;	//MaxLength: 128		//Size in Packet: 4 bytes
		wchar_t[128]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x00885420


Packet 0x0041
	TemplateSize: 5

	Template: 0x00000041 0x00000404 0x00000012 0x00000204 
		0x00000204 

	DecodedTemplate: 
	struct Packet_0x41
	{
		const short Header = 0x41;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		float		//Size in Packet: 4 bytes
		float		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00885440


Packet 0x0042
	TemplateSize: 4

	Template: 0x00000042 0x00000404 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0x42
	{
		const short Header = 0x42;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x008854B0


Packet 0x0043
	TemplateSize: 0

	Template: 

	DecodedTemplate: 


	Handler: 0x00000000


Packet 0x0044
	TemplateSize: 7

	Template: 0x00000044 0x00000404 0x00000404 0x00000817 
		0x00000817 0x00000817 0x00000204 

	DecodedTemplate: 
	struct Packet_0x44
	{
		const short Header = 0x44;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 8		//Size in Packet: 4 bytes
		wchar_t[8]		//Size in Packet: 2 * string_length bytes
		//short string_length;	//MaxLength: 8		//Size in Packet: 4 bytes
		wchar_t[8]		//Size in Packet: 2 * string_length bytes
		//short string_length;	//MaxLength: 8		//Size in Packet: 4 bytes
		wchar_t[8]		//Size in Packet: 2 * string_length bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00885480


Packet 0x0045
	TemplateSize: 5

	Template: 0x00000045 0x00000404 0x00000012 0x00000204 
		0x00000204 

	DecodedTemplate: 
	struct Packet_0x45
	{
		const short Header = 0x45;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		float		//Size in Packet: 4 bytes
		float		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
	}


	Handler: 0x008854D0


Packet 0x0046
	TemplateSize: 2

	Template: 0x00000046 0x00000404 

	DecodedTemplate: 
	struct Packet_0x46
	{
		const short Header = 0x46;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00885510


Packet 0x0047
	TemplateSize: 5

	Template: 0x00000047 0x00000404 0x00000012 0x00000204 
		0x00000204 

	DecodedTemplate: 
	struct Packet_0x47
	{
		const short Header = 0x47;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		float		//Size in Packet: 4 bytes
		float		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00885520


Packet 0x0048
	TemplateSize: 3

	Template: 0x00000048 0x00000404 0x00008017 

	DecodedTemplate: 
	struct Packet_0x48
	{
		const short Header = 0x48;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 128		//Size in Packet: 4 bytes
		wchar_t[128]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x00885560


Packet 0x0049
	TemplateSize: 0

	Template: 

	DecodedTemplate: 


	Handler: 0x00000000


Packet 0x004A
	TemplateSize: 10

	Template: 0x0000004A 0x00000404 0x00000404 0x00000404 
		0x00000404 0x00000404 0x00000404 0x00000104 0x00000104 
		0x00000817 

	DecodedTemplate: 
	struct Packet_0x4a
	{
		const short Header = 0x4a;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 8		//Size in Packet: 4 bytes
		wchar_t[8]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x00885580


Packet 0x004B
	TemplateSize: 4

	Template: 0x0000004B 0x00000404 0x0000082B 0x00000006 

	DecodedTemplate: 
	struct Packet_0x4b
	{
		const short Header = 0x4b;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		short length;	//MaxLength: 8		//Size in Packet: 4 bytes
		DWORD[length]	//MaxLength: 8		//Size in Packet: 4 * length bytes MaxSize in Packet: 32bytes
	}


	Handler: 0x008855E0


Packet 0x004C
	TemplateSize: 3

	Template: 0x0000004C 0x00000404 0x00002017 

	DecodedTemplate: 
	struct Packet_0x4c
	{
		const short Header = 0x4c;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 32		//Size in Packet: 4 bytes
		wchar_t[32]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x00885630


Packet 0x004D
	TemplateSize: 8

	Template: 0x0000004D 0x00000404 0x00000010 0x00000404 
		0x00000104 0x00000404 0x00000404 0x00002017 

	DecodedTemplate: 
	struct Packet_0x4d
	{
		const short Header = 0x4d;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 32		//Size in Packet: 4 bytes
		wchar_t[32]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x00885650


Packet 0x004E
	TemplateSize: 2

	Template: 0x0000004E 0x00000404 

	DecodedTemplate: 
	struct Packet_0x4e
	{
		const short Header = 0x4e;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x008856B0


Packet 0x004F
	TemplateSize: 2

	Template: 0x0000004F 0x00000404 

	DecodedTemplate: 
	struct Packet_0x4f
	{
		const short Header = 0x4f;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x008856C0


Packet 0x0050
	TemplateSize: 4

	Template: 0x00000050 0x00000010 0x00000010 0x00000404 

	DecodedTemplate: 
	struct Packet_0x50
	{
		const short Header = 0x50;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x008856D0


Packet 0x0051
	TemplateSize: 2

	Template: 0x00000051 0x00007A17 

	DecodedTemplate: 
	struct Packet_0x51
	{
		const short Header = 0x51;		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 122		//Size in Packet: 4 bytes
		wchar_t[122]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x008856F0


Packet 0x0052
	TemplateSize: 3

	Template: 0x00000052 0x00000204 0x00000104 

	DecodedTemplate: 
	struct Packet_0x52
	{
		const short Header = 0x52;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x00885700


Packet 0x0053
	TemplateSize: 4

	Template: 0x00000053 0x00000010 0x00000104 0x00000817 

	DecodedTemplate: 
	struct Packet_0x53
	{
		const short Header = 0x53;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 8		//Size in Packet: 4 bytes
		wchar_t[8]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x00885720


Packet 0x0054
	TemplateSize: 4

	Template: 0x00000054 0x00000104 0x00002017 0x00000617 

	DecodedTemplate: 
	struct Packet_0x54
	{
		const short Header = 0x54;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 32		//Size in Packet: 4 bytes
		wchar_t[32]		//Size in Packet: 2 * string_length bytes
		//short string_length;	//MaxLength: 6		//Size in Packet: 4 bytes
		wchar_t[6]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x00885740


Packet 0x0055
	TemplateSize: 3

	Template: 0x00000055 0x00000204 0x00000104 

	DecodedTemplate: 
	struct Packet_0x55
	{
		const short Header = 0x55;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x00885760


Packet 0x0056
	TemplateSize: 3

	Template: 0x00000056 0x00000010 0x00000404 

	DecodedTemplate: 
	struct Packet_0x56
	{
		const short Header = 0x56;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00885780


Packet 0x0057
	TemplateSize: 3

	Template: 0x00000057 0x00000010 0x00000010 

	DecodedTemplate: 
	struct Packet_0x57
	{
		const short Header = 0x57;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
	}


	Handler: 0x008857A0


Packet 0x0058
	TemplateSize: 4

	Template: 0x00000058 0x00000010 0x00000104 0x00000104 

	DecodedTemplate: 
	struct Packet_0x58
	{
		const short Header = 0x58;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x008857C0


Packet 0x0059
	TemplateSize: 3

	Template: 0x00000059 0x00000010 0x00000104 

	DecodedTemplate: 
	struct Packet_0x59
	{
		const short Header = 0x59;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x008857E0


Packet 0x005A
	TemplateSize: 4

	Template: 0x0000005A 0x00000010 0x00000012 0x00000204 

	DecodedTemplate: 
	struct Packet_0x5a
	{
		const short Header = 0x5a;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		float		//Size in Packet: 4 bytes
		float		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00885800


Packet 0x005B
	TemplateSize: 3

	Template: 0x0000005B 0x00000012 0x00000204 

	DecodedTemplate: 
	struct Packet_0x5b
	{
		const short Header = 0x5b;		//Size in Packet: 4 bytes
		float		//Size in Packet: 4 bytes
		float		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00885840


Packet 0x005C
	TemplateSize: 4

	Template: 0x0000005C 0x00000010 0x00000204 0x00000404 

	DecodedTemplate: 
	struct Packet_0x5c
	{
		const short Header = 0x5c;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00885870


Packet 0x005D
	TemplateSize: 2

	Template: 0x0000005D 0x00000010 

	DecodedTemplate: 
	struct Packet_0x5d
	{
		const short Header = 0x5d;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
	}


	Handler: 0x00885890


Packet 0x005E
	TemplateSize: 2

	Template: 0x0000005E 0x00000404 

	DecodedTemplate: 
	struct Packet_0x5e
	{
		const short Header = 0x5e;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x008858A0


Packet 0x005F
	TemplateSize: 3

	Template: 0x0000005F 0x00000104 0x00000404 

	DecodedTemplate: 
	struct Packet_0x5f
	{
		const short Header = 0x5f;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x008858B0


Packet 0x0060
	TemplateSize: 4

	Template: 0x00000060 0x00000404 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0x60
	{
		const short Header = 0x60;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x008858D0


Packet 0x0061
	TemplateSize: 4

	Template: 0x00000061 0x00000010 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0x61
	{
		const short Header = 0x61;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x008858F0


Packet 0x0062
	TemplateSize: 11

	Template: 0x00000062 0x00000010 0x00000404 0x00000404 
		0x00000404 0x00000404 0x00000404 0x00000404 0x00000404 
		0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0x62
	{
		const short Header = 0x62;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00885910


Packet 0x0063
	TemplateSize: 4

	Template: 0x00000063 0x00000010 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0x63
	{
		const short Header = 0x63;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00885930


Packet 0x0064
	TemplateSize: 2

	Template: 0x00000064 0x00000104 

	DecodedTemplate: 
	struct Packet_0x64
	{
		const short Header = 0x64;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x00885950


Packet 0x0065
	TemplateSize: 2

	Template: 0x00000065 0x00000010 

	DecodedTemplate: 
	struct Packet_0x65
	{
		const short Header = 0x65;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
	}


	Handler: 0x00885960


Packet 0x0066
	TemplateSize: 5

	Template: 0x00000066 0x00000204 0x00000010 0x00000404 
		0x00000404 

	DecodedTemplate: 
	struct Packet_0x66
	{
		const short Header = 0x66;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00885970


Packet 0x0067
	TemplateSize: 9

	Template: 0x00000067 0x00000204 0x00000104 0x00000104 
		0x00000104 0x00000404 0x00000404 0x00000104 0x00000104 

	DecodedTemplate: 
	struct Packet_0x67
	{
		const short Header = 0x67;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x00885990


Packet 0x0068
	TemplateSize: 21

	Template: 0x00000068 0x00000204 0x00000104 0x00000104 
		0x00000104 0x00000404 0x00000404 0x00000104 0x00000104 
		0x00000404 0x00000404 0x00000404 0x00000404 
		0x00000404 0x00000404 0x00000404 0x00000404 
		0x00000404 0x00000404 0x00000404 0x00002017 

	DecodedTemplate: 
	struct Packet_0x68
	{
		const short Header = 0x68;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 32		//Size in Packet: 4 bytes
		wchar_t[32]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x008859E0


Packet 0x0069
	TemplateSize: 2

	Template: 0x00000069 0x00000010 

	DecodedTemplate: 
	struct Packet_0x69
	{
		const short Header = 0x69;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
	}


	Handler: 0x00885A60


Packet 0x006A
	TemplateSize: 2

	Template: 0x0000006A 0x00000204 

	DecodedTemplate: 
	struct Packet_0x6a
	{
		const short Header = 0x6a;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00885A70


Packet 0x006B
	TemplateSize: 2

	Template: 0x0000006B 0x00000204 

	DecodedTemplate: 
	struct Packet_0x6b
	{
		const short Header = 0x6b;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00885A80


Packet 0x006C
	TemplateSize: 8

	Template: 0x0000006C 0x00000104 0x0000200C 0x00000204 
		0x00000104 0x00000404 0x00000404 0x00000104 

	DecodedTemplate: 
	struct Packet_0x6c
	{
		const short Header = 0x6c;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE ArraySize;	//MaxSize: 32		//Size in Packet: 4 bytes
		WORD[ArraySize]	//Mask: 0x0000ffff		//Size in Packet: 4 bytes / element
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x00885A90


Packet 0x006D
	TemplateSize: 3

	Template: 0x0000006D 0x00000204 0x00000404 

	DecodedTemplate: 
	struct Packet_0x6d
	{
		const short Header = 0x6d;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00885C60


Packet 0x006E
	TemplateSize: 6

	Template: 0x0000006E 0x00000404 0x00000817 0x00000404 
		0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0x6e
	{
		const short Header = 0x6e;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 8		//Size in Packet: 4 bytes
		wchar_t[8]		//Size in Packet: 2 * string_length bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00885C80


Packet 0x006F
	TemplateSize: 2

	Template: 0x0000006F 0x00000404 

	DecodedTemplate: 
	struct Packet_0x6f
	{
		const short Header = 0x6f;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00885CA0


Packet 0x0070
	TemplateSize: 2

	Template: 0x00000070 0x00000404 

	DecodedTemplate: 
	struct Packet_0x70
	{
		const short Header = 0x70;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00885CB0


Packet 0x0071
	TemplateSize: 2

	Template: 0x00000071 0x00000404 

	DecodedTemplate: 
	struct Packet_0x71
	{
		const short Header = 0x71;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00885D70


Packet 0x0072
	TemplateSize: 5

	Template: 0x00000072 0x00000104 0x00008017 0x00000404 
		0x00000404 

	DecodedTemplate: 
	struct Packet_0x72
	{
		const short Header = 0x72;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 128		//Size in Packet: 4 bytes
		wchar_t[128]		//Size in Packet: 2 * string_length bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00885CC0


Packet 0x0073
	TemplateSize: 0

	Template: 

	DecodedTemplate: 


	Handler: 0x00000000


Packet 0x0074
	TemplateSize: 2

	Template: 0x00000074 0x00007A17 

	DecodedTemplate: 
	struct Packet_0x74
	{
		const short Header = 0x74;		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 122		//Size in Packet: 4 bytes
		wchar_t[122]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x00885D00


Packet 0x0075
	TemplateSize: 2

	Template: 0x00000075 0x00000010 

	DecodedTemplate: 
	struct Packet_0x75
	{
		const short Header = 0x75;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
	}


	Handler: 0x00885D10


Packet 0x0076
	TemplateSize: 3

	Template: 0x00000076 0x00000010 0x00000204 

	DecodedTemplate: 
	struct Packet_0x76
	{
		const short Header = 0x76;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00885D20


Packet 0x0077
	TemplateSize: 4

	Template: 0x00000077 0x00000010 0x00000104 0x00000404 

	DecodedTemplate: 
	struct Packet_0x77
	{
		const short Header = 0x77;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00885D40


Packet 0x0078
	TemplateSize: 3

	Template: 0x00000078 0x0000102B 0x00000006 

	DecodedTemplate: 
	struct Packet_0x78
	{
		const short Header = 0x78;		//Size in Packet: 4 bytes
		short length;	//MaxLength: 16		//Size in Packet: 4 bytes
		DWORD[length]	//MaxLength: 16		//Size in Packet: 4 * length bytes MaxSize in Packet: 64bytes
	}


	Handler: 0x00885D80


Packet 0x0079
	TemplateSize: 2

	Template: 0x00000079 0x00000104 

	DecodedTemplate: 
	struct Packet_0x79
	{
		const short Header = 0x79;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x00885DA0


Packet 0x007A
	TemplateSize: 2

	Template: 0x0000007A 0x00000104 

	DecodedTemplate: 
	struct Packet_0x7a
	{
		const short Header = 0x7a;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x00885DB0


Packet 0x007B
	TemplateSize: 19

	Template: 0x0000007B 0x00000104 0x00000404 0x00000404 
		0x00000404 0x00000404 0x00000404 0x00000404 0x00000404 
		0x00000204 0x00000204 0x00000204 0x00000204 
		0x00000204 0x00000104 0x00000104 0x00000104 
		0x00000104 0x00000104 

	DecodedTemplate: 
	struct Packet_0x7b
	{
		const short Header = 0x7b;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x00885DC0


Packet 0x007C
	TemplateSize: 2

	Template: 0x0000007C 0x00000104 

	DecodedTemplate: 
	struct Packet_0x7c
	{
		const short Header = 0x7c;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x00885DF0


Packet 0x007D
	TemplateSize: 4

	Template: 0x0000007D 0x00000104 0x00000003 0x00000012 

	DecodedTemplate: 
	struct Packet_0x7d
	{
		const short Header = 0x7d;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		float		//Size in Packet: 4 bytes
		float		//Size in Packet: 4 bytes
		float		//Size in Packet: 4 bytes
		float		//Size in Packet: 4 bytes
		float		//Size in Packet: 4 bytes
	}


	Handler: 0x00885E00


Packet 0x007E
	TemplateSize: 3

	Template: 0x0000007E 0x0000402B 0x00000006 

	DecodedTemplate: 
	struct Packet_0x7e
	{
		const short Header = 0x7e;		//Size in Packet: 4 bytes
		short length;	//MaxLength: 64		//Size in Packet: 4 bytes
		DWORD[length]	//MaxLength: 64		//Size in Packet: 4 * length bytes MaxSize in Packet: 256bytes
	}


	Handler: 0x00885E20


Packet 0x007F
	TemplateSize: 4

	Template: 0x0000007F 0x00000404 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0x7f
	{
		const short Header = 0x7f;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00885E40


Packet 0x0080
	TemplateSize: 3

	Template: 0x00000080 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0x80
	{
		const short Header = 0x80;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00885E70


Packet 0x0081
	TemplateSize: 8

	Template: 0x00000081 0x00000404 0x00000012 0x00000204 
		0x00000104 0x00000404 0x00000404 0x00000817 

	DecodedTemplate: 
	struct Packet_0x81
	{
		const short Header = 0x81;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		float		//Size in Packet: 4 bytes
		float		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 8		//Size in Packet: 4 bytes
		wchar_t[8]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x00885EA0


Packet 0x0082
	TemplateSize: 2

	Template: 0x00000082 0x00000404 

	DecodedTemplate: 
	struct Packet_0x82
	{
		const short Header = 0x82;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00885EF0


Packet 0x0083
	TemplateSize: 3

	Template: 0x00000083 0x00000404 0x00000104 

	DecodedTemplate: 
	struct Packet_0x83
	{
		const short Header = 0x83;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x00885F00


Packet 0x0084
	TemplateSize: 3

	Template: 0x00000084 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0x84
	{
		const short Header = 0x84;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00885F20


Packet 0x0085
	TemplateSize: 5

	Template: 0x00000085 0x00000204 0x00000404 0x0000102B 
		0x00000006 

	DecodedTemplate: 
	struct Packet_0x85
	{
		const short Header = 0x85;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		short length;	//MaxLength: 16		//Size in Packet: 4 bytes
		DWORD[length]	//MaxLength: 16		//Size in Packet: 4 * length bytes MaxSize in Packet: 64bytes
	}


	Handler: 0x00885F40


Packet 0x0086
	TemplateSize: 3

	Template: 0x00000086 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0x86
	{
		const short Header = 0x86;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00885FB0


Packet 0x0087
	TemplateSize: 3

	Template: 0x00000087 0x00000010 0x00000404 

	DecodedTemplate: 
	struct Packet_0x87
	{
		const short Header = 0x87;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00885FE0


Packet 0x0088
	TemplateSize: 11

	Template: 0x00000088 0x0000202B 0x00000006 0x0000202B 
		0x00000006 0x0000202B 0x00000006 0x0000202B 0x00000006 
		0x0000202B 0x00000006 

	DecodedTemplate: 
	struct Packet_0x88
	{
		const short Header = 0x88;		//Size in Packet: 4 bytes
		short length;	//MaxLength: 32		//Size in Packet: 4 bytes
		DWORD[length]	//MaxLength: 32		//Size in Packet: 4 * length bytes MaxSize in Packet: 128bytes
		short length;	//MaxLength: 32		//Size in Packet: 4 bytes
		DWORD[length]	//MaxLength: 32		//Size in Packet: 4 * length bytes MaxSize in Packet: 128bytes
		short length;	//MaxLength: 32		//Size in Packet: 4 bytes
		DWORD[length]	//MaxLength: 32		//Size in Packet: 4 * length bytes MaxSize in Packet: 128bytes
		short length;	//MaxLength: 32		//Size in Packet: 4 bytes
		DWORD[length]	//MaxLength: 32		//Size in Packet: 4 * length bytes MaxSize in Packet: 128bytes
		short length;	//MaxLength: 32		//Size in Packet: 4 bytes
		DWORD[length]	//MaxLength: 32		//Size in Packet: 4 * length bytes MaxSize in Packet: 128bytes
	}


	Handler: 0x00886000


Packet 0x0089
	TemplateSize: 3

	Template: 0x00000089 0x00000204 0x00000404 

	DecodedTemplate: 
	struct Packet_0x89
	{
		const short Header = 0x89;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00886060


Packet 0x008A
	TemplateSize: 6

	Template: 0x0000008A 0x00000404 0x00000404 0x00000404 
		0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0x8a
	{
		const short Header = 0x8a;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00886080


Packet 0x008B
	TemplateSize: 3

	Template: 0x0000008B 0x00000104 0x00008017 

	DecodedTemplate: 
	struct Packet_0x8b
	{
		const short Header = 0x8b;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 128		//Size in Packet: 4 bytes
		wchar_t[128]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x008860A0


Packet 0x008C
	TemplateSize: 5

	Template: 0x0000008C 0x00000104 0x00000404 0x00000404 
		0x00000404 

	DecodedTemplate: 
	struct Packet_0x8c
	{
		const short Header = 0x8c;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x008860C0


Packet 0x008D
	TemplateSize: 3

	Template: 0x0000008D 0x00000204 0x00000104 

	DecodedTemplate: 
	struct Packet_0x8d
	{
		const short Header = 0x8d;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x008860E0


Packet 0x008E
	TemplateSize: 3

	Template: 0x0000008E 0x00000010 0x00000404 

	DecodedTemplate: 
	struct Packet_0x8e
	{
		const short Header = 0x8e;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00886100


Packet 0x008F
	TemplateSize: 3

	Template: 0x0000008F 0x00000010 0x00002017 

	DecodedTemplate: 
	struct Packet_0x8f
	{
		const short Header = 0x8f;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 32		//Size in Packet: 4 bytes
		wchar_t[32]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x00886120


Packet 0x0090
	TemplateSize: 3

	Template: 0x00000090 0x00000010 0x00000404 

	DecodedTemplate: 
	struct Packet_0x90
	{
		const short Header = 0x90;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00886140


Packet 0x0091
	TemplateSize: 4

	Template: 0x00000091 0x00000010 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0x91
	{
		const short Header = 0x91;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00886160


Packet 0x0092
	TemplateSize: 5

	Template: 0x00000092 0x00000010 0x00002017 0x00000104 
		0x00007A17 

	DecodedTemplate: 
	struct Packet_0x92
	{
		const short Header = 0x92;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 32		//Size in Packet: 4 bytes
		wchar_t[32]		//Size in Packet: 2 * string_length bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 122		//Size in Packet: 4 bytes
		wchar_t[122]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x00886180


Packet 0x0093
	TemplateSize: 4

	Template: 0x00000093 0x00000404 0x00000010 0x00000404 

	DecodedTemplate: 
	struct Packet_0x93
	{
		const short Header = 0x93;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x008861A0


Packet 0x0094
	TemplateSize: 5

	Template: 0x00000094 0x00000404 0x00000010 0x00000010 
		0x00000404 

	DecodedTemplate: 
	struct Packet_0x94
	{
		const short Header = 0x94;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x008861C0


Packet 0x0095
	TemplateSize: 7

	Template: 0x00000095 0x00000012 0x00000204 0x00000010 
		0x00000204 0x00000104 0x00000104 

	DecodedTemplate: 
	struct Packet_0x95
	{
		const short Header = 0x95;		//Size in Packet: 4 bytes
		float		//Size in Packet: 4 bytes
		float		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x008861E0


Packet 0x0096
	TemplateSize: 4

	Template: 0x00000096 0x00000404 0x00000010 0x00000404 

	DecodedTemplate: 
	struct Packet_0x96
	{
		const short Header = 0x96;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00886220


Packet 0x0097
	TemplateSize: 5

	Template: 0x00000097 0x00000404 0x00000010 0x00000010 
		0x00000404 

	DecodedTemplate: 
	struct Packet_0x97
	{
		const short Header = 0x97;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00886240


Packet 0x0098
	TemplateSize: 8

	Template: 0x00000098 0x00000010 0x00000012 0x00000204 
		0x00000404 0x00000404 0x00000404 0x00000104 

	DecodedTemplate: 
	struct Packet_0x98
	{
		const short Header = 0x98;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		float		//Size in Packet: 4 bytes
		float		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x00886260


Packet 0x0099
	TemplateSize: 3

	Template: 0x00000099 0x00000010 0x00007A17 

	DecodedTemplate: 
	struct Packet_0x99
	{
		const short Header = 0x99;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 122		//Size in Packet: 4 bytes
		wchar_t[122]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x008862B0


Packet 0x009A
	TemplateSize: 4

	Template: 0x0000009A 0x00000010 0x00000104 0x00000104 

	DecodedTemplate: 
	struct Packet_0x9a
	{
		const short Header = 0x9a;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x008862D0


Packet 0x009B
	TemplateSize: 4

	Template: 0x0000009B 0x00000010 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0x9b
	{
		const short Header = 0x9b;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x008862F0


Packet 0x009C
	TemplateSize: 4

	Template: 0x0000009C 0x00000012 0x00000204 0x00000404 

	DecodedTemplate: 
	struct Packet_0x9c
	{
		const short Header = 0x9c;		//Size in Packet: 4 bytes
		float		//Size in Packet: 4 bytes
		float		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00886310


Packet 0x009D
	TemplateSize: 3

	Template: 0x0000009D 0x00000010 0x00000404 

	DecodedTemplate: 
	struct Packet_0x9d
	{
		const short Header = 0x9d;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00886350


Packet 0x009E
	TemplateSize: 4

	Template: 0x0000009E 0x00000010 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0x9e
	{
		const short Header = 0x9e;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00886370


Packet 0x009F
	TemplateSize: 1

	Template: 0x0000009F 

	DecodedTemplate: 
	struct Packet_0x9f
	{
		const short Header = 0x9f;		//Size in Packet: 4 bytes
	}


	Handler: 0x00886390


Packet 0x00A0
	TemplateSize: 3

	Template: 0x000000A0 0x00000010 0x00000104 

	DecodedTemplate: 
	struct Packet_0xa0
	{
		const short Header = 0xa0;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x008863A0


Packet 0x00A1
	TemplateSize: 3

	Template: 0x000000A1 0x00000404 0x00000104 

	DecodedTemplate: 
	struct Packet_0xa1
	{
		const short Header = 0xa1;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x008863C0


Packet 0x00A2
	TemplateSize: 3

	Template: 0x000000A2 0x00000010 0x00000404 

	DecodedTemplate: 
	struct Packet_0xa2
	{
		const short Header = 0xa2;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x008863E0


Packet 0x00A3
	TemplateSize: 2

	Template: 0x000000A3 0x00002017 

	DecodedTemplate: 
	struct Packet_0xa3
	{
		const short Header = 0xa3;		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 32		//Size in Packet: 4 bytes
		wchar_t[32]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x00886400


Packet 0x00A4
	TemplateSize: 3

	Template: 0x000000A4 0x00000204 0x00000104 

	DecodedTemplate: 
	struct Packet_0xa4
	{
		const short Header = 0xa4;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x00886410


Packet 0x00A5
	TemplateSize: 3

	Template: 0x000000A5 0x00000204 0x00000204 

	DecodedTemplate: 
	struct Packet_0xa5
	{
		const short Header = 0xa5;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00886490


Packet 0x00A6
	TemplateSize: 7

	Template: 0x000000A6 0x00000010 0x00000010 0x00002017 
		0x00000404 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0xa6
	{
		const short Header = 0xa6;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 32		//Size in Packet: 4 bytes
		wchar_t[32]		//Size in Packet: 2 * string_length bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00886430


Packet 0x00A7
	TemplateSize: 2

	Template: 0x000000A7 0x00000010 

	DecodedTemplate: 
	struct Packet_0xa7
	{
		const short Header = 0xa7;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
	}


	Handler: 0x00886460


Packet 0x00A8
	TemplateSize: 3

	Template: 0x000000A8 0x00000010 0x00002017 

	DecodedTemplate: 
	struct Packet_0xa8
	{
		const short Header = 0xa8;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 32		//Size in Packet: 4 bytes
		wchar_t[32]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x00886470


Packet 0x00A9
	TemplateSize: 3

	Template: 0x000000A9 0x0001000B 0x00000006 

	DecodedTemplate: 
	struct Packet_0xa9
	{
		const short Header = 0xa9;		//Size in Packet: 4 bytes
		short length;	//MaxLength: 256		//Size in Packet: 4 bytes
		BYTE[length]	//MaxLength: 256		//Size in Packet: 1 * length bytes MaxSize in Packet: 256bytes
	}


	Handler: 0x008864B0


Packet 0x00AA
	TemplateSize: 3

	Template: 0x000000AA 0x00000010 0x00000404 

	DecodedTemplate: 
	struct Packet_0xaa
	{
		const short Header = 0xaa;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x008864D0


Packet 0x00AB
	TemplateSize: 5

	Template: 0x000000AB 0x00000010 0x00000104 0x00000104 
		0x00000104 

	DecodedTemplate: 
	struct Packet_0xab
	{
		const short Header = 0xab;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x008864F0


Packet 0x00AC
	TemplateSize: 1

	Template: 0x000000AC 

	DecodedTemplate: 
	struct Packet_0xac
	{
		const short Header = 0xac;		//Size in Packet: 4 bytes
	}


	Handler: 0x00886510


Packet 0x00AD
	TemplateSize: 3

	Template: 0x000000AD 0x00008017 0x00000404 

	DecodedTemplate: 
	struct Packet_0xad
	{
		const short Header = 0xad;		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 128		//Size in Packet: 4 bytes
		wchar_t[128]		//Size in Packet: 2 * string_length bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00886520


Packet 0x00AE
	TemplateSize: 1

	Template: 0x000000AE 

	DecodedTemplate: 
	struct Packet_0xae
	{
		const short Header = 0xae;		//Size in Packet: 4 bytes
	}


	Handler: 0x00886540


Packet 0x00AF
	TemplateSize: 4

	Template: 0x000000AF 0x00000404 0x00000404 0x00008017 

	DecodedTemplate: 
	struct Packet_0xaf
	{
		const short Header = 0xaf;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 128		//Size in Packet: 4 bytes
		wchar_t[128]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x00886550


Packet 0x00B0
	TemplateSize: 2

	Template: 0x000000B0 0x00000404 

	DecodedTemplate: 
	struct Packet_0xb0
	{
		const short Header = 0xb0;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00886570


Packet 0x00B1
	TemplateSize: 3

	Template: 0x000000B1 0x00000404 0x00008017 

	DecodedTemplate: 
	struct Packet_0xb1
	{
		const short Header = 0xb1;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 128		//Size in Packet: 4 bytes
		wchar_t[128]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x00886580


Packet 0x00B2
	TemplateSize: 2

	Template: 0x000000B2 0x00000010 

	DecodedTemplate: 
	struct Packet_0xb2
	{
		const short Header = 0xb2;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
	}


	Handler: 0x008865A0


Packet 0x00B3
	TemplateSize: 3

	Template: 0x000000B3 0x0000402B 0x00000006 

	DecodedTemplate: 
	struct Packet_0xb3
	{
		const short Header = 0xb3;		//Size in Packet: 4 bytes
		short length;	//MaxLength: 64		//Size in Packet: 4 bytes
		DWORD[length]	//MaxLength: 64		//Size in Packet: 4 * length bytes MaxSize in Packet: 256bytes
	}


	Handler: 0x008865B0


Packet 0x00B4
	TemplateSize: 6

	Template: 0x000000B4 0x00000404 0x00000404 0x00000404 
		0x00008017 0x00008017 

	DecodedTemplate: 
	struct Packet_0xb4
	{
		const short Header = 0xb4;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 128		//Size in Packet: 4 bytes
		wchar_t[128]		//Size in Packet: 2 * string_length bytes
		//short string_length;	//MaxLength: 128		//Size in Packet: 4 bytes
		wchar_t[128]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x008865D0


Packet 0x00B5
	TemplateSize: 3

	Template: 0x000000B5 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0xb5
	{
		const short Header = 0xb5;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x008865F0


Packet 0x00B6
	TemplateSize: 3

	Template: 0x000000B6 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0xb6
	{
		const short Header = 0xb6;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00886610


Packet 0x00B7
	TemplateSize: 3

	Template: 0x000000B7 0x00000104 0x00000404 

	DecodedTemplate: 
	struct Packet_0xb7
	{
		const short Header = 0xb7;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00886630


Packet 0x00B8
	TemplateSize: 2

	Template: 0x000000B8 0x00000010 

	DecodedTemplate: 
	struct Packet_0xb8
	{
		const short Header = 0xb8;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
	}


	Handler: 0x00886650


Packet 0x00B9
	TemplateSize: 3

	Template: 0x000000B9 0x00000104 0x00007A17 

	DecodedTemplate: 
	struct Packet_0xb9
	{
		const short Header = 0xb9;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 122		//Size in Packet: 4 bytes
		wchar_t[122]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x00886660


Packet 0x00BA
	TemplateSize: 3

	Template: 0x000000BA 0x00000104 0x00000404 

	DecodedTemplate: 
	struct Packet_0xba
	{
		const short Header = 0xba;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00886680


Packet 0x00BB
	TemplateSize: 5

	Template: 0x000000BB 0x00000104 0x00000404 0x0000102B 
		0x00000006 

	DecodedTemplate: 
	struct Packet_0xbb
	{
		const short Header = 0xbb;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		short length;	//MaxLength: 16		//Size in Packet: 4 bytes
		DWORD[length]	//MaxLength: 16		//Size in Packet: 4 * length bytes MaxSize in Packet: 64bytes
	}


	Handler: 0x008866E0


Packet 0x00BC
	TemplateSize: 4

	Template: 0x000000BC 0x00000104 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0xbc
	{
		const short Header = 0xbc;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x008866A0


Packet 0x00BD
	TemplateSize: 3

	Template: 0x000000BD 0x00000104 0x00000104 

	DecodedTemplate: 
	struct Packet_0xbd
	{
		const short Header = 0xbd;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x008866C0


Packet 0x00BE
	TemplateSize: 3

	Template: 0x000000BE 0x00000104 0x00000404 

	DecodedTemplate: 
	struct Packet_0xbe
	{
		const short Header = 0xbe;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00886720


Packet 0x00BF
	TemplateSize: 2

	Template: 0x000000BF 0x00000104 

	DecodedTemplate: 
	struct Packet_0xbf
	{
		const short Header = 0xbf;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x00886740


Packet 0x00C0
	TemplateSize: 2

	Template: 0x000000C0 0x00000104 

	DecodedTemplate: 
	struct Packet_0xc0
	{
		const short Header = 0xc0;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x00886750


Packet 0x00C1
	TemplateSize: 5

	Template: 0x000000C1 0x00000104 0x00000404 0x00000104 
		0x00000104 

	DecodedTemplate: 
	struct Packet_0xc1
	{
		const short Header = 0xc1;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x00886760


Packet 0x00C2
	TemplateSize: 3

	Template: 0x000000C2 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0xc2
	{
		const short Header = 0xc2;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00886780


Packet 0x00C3
	TemplateSize: 3

	Template: 0x000000C3 0x00000010 0x00000404 

	DecodedTemplate: 
	struct Packet_0xc3
	{
		const short Header = 0xc3;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x008867A0


Packet 0x00C4
	TemplateSize: 2

	Template: 0x000000C4 0x00000010 

	DecodedTemplate: 
	struct Packet_0xc4
	{
		const short Header = 0xc4;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
	}


	Handler: 0x008867C0


Packet 0x00C5
	TemplateSize: 5

	Template: 0x000000C5 0x00000010 0x00000204 0x00000404 
		0x00000404 

	DecodedTemplate: 
	struct Packet_0xc5
	{
		const short Header = 0xc5;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x008867D0


Packet 0x00C6
	TemplateSize: 4

	Template: 0x000000C6 0x00000010 0x00000204 0x00000404 

	DecodedTemplate: 
	struct Packet_0xc6
	{
		const short Header = 0xc6;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x008867F0


Packet 0x00C7
	TemplateSize: 3

	Template: 0x000000C7 0x0000802B 0x00000006 

	DecodedTemplate: 
	struct Packet_0xc7
	{
		const short Header = 0xc7;		//Size in Packet: 4 bytes
		short length;	//MaxLength: 128		//Size in Packet: 4 bytes
		DWORD[length]	//MaxLength: 128		//Size in Packet: 4 * length bytes MaxSize in Packet: 512bytes
	}


	Handler: 0x00886810


Packet 0x00C8
	TemplateSize: 1

	Template: 0x000000C8 

	DecodedTemplate: 
	struct Packet_0xc8
	{
		const short Header = 0xc8;		//Size in Packet: 4 bytes
	}


	Handler: 0x00886830


Packet 0x00C9
	TemplateSize: 1

	Template: 0x000000C9 

	DecodedTemplate: 
	struct Packet_0xc9
	{
		const short Header = 0xc9;		//Size in Packet: 4 bytes
	}


	Handler: 0x00886860


Packet 0x00CA
	TemplateSize: 4

	Template: 0x000000CA 0x00000204 0x00000204 0x00000404 

	DecodedTemplate: 
	struct Packet_0xca
	{
		const short Header = 0xca;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00886870


Packet 0x00CB
	TemplateSize: 3

	Template: 0x000000CB 0x0000082B 0x00000006 

	DecodedTemplate: 
	struct Packet_0xcb
	{
		const short Header = 0xcb;		//Size in Packet: 4 bytes
		short length;	//MaxLength: 8		//Size in Packet: 4 bytes
		DWORD[length]	//MaxLength: 8		//Size in Packet: 4 * length bytes MaxSize in Packet: 32bytes
	}


	Handler: 0x00885D80


Packet 0x00CC
	TemplateSize: 3

	Template: 0x000000CC 0x0000042B 0x00000006 

	DecodedTemplate: 
	struct Packet_0xcc
	{
		const short Header = 0xcc;		//Size in Packet: 4 bytes
		short length;	//MaxLength: 4		//Size in Packet: 4 bytes
		DWORD[length]	//MaxLength: 4		//Size in Packet: 4 * length bytes MaxSize in Packet: 16bytes
	}


	Handler: 0x00886840


Packet 0x00CD
	TemplateSize: 5

	Template: 0x000000CD 0x00000010 0x00000104 0x00000204 
		0x00000404 

	DecodedTemplate: 
	struct Packet_0xcd
	{
		const short Header = 0xcd;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00886890


Packet 0x00CE
	TemplateSize: 7

	Template: 0x000000CE 0x00000010 0x0000082B 0x00000006 
		0x0000082B 0x00000006 0x00000104 

	DecodedTemplate: 
	struct Packet_0xce
	{
		const short Header = 0xce;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		short length;	//MaxLength: 8		//Size in Packet: 4 bytes
		DWORD[length]	//MaxLength: 8		//Size in Packet: 4 * length bytes MaxSize in Packet: 32bytes
		short length;	//MaxLength: 8		//Size in Packet: 4 bytes
		DWORD[length]	//MaxLength: 8		//Size in Packet: 4 * length bytes MaxSize in Packet: 32bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x008868B0


Packet 0x00CF
	TemplateSize: 3

	Template: 0x000000CF 0x0000802B 0x00000006 

	DecodedTemplate: 
	struct Packet_0xcf
	{
		const short Header = 0xcf;		//Size in Packet: 4 bytes
		short length;	//MaxLength: 128		//Size in Packet: 4 bytes
		DWORD[length]	//MaxLength: 128		//Size in Packet: 4 * length bytes MaxSize in Packet: 512bytes
	}


	Handler: 0x008868D0


Packet 0x00D0
	TemplateSize: 3

	Template: 0x000000D0 0x00000204 0x00000404 

	DecodedTemplate: 
	struct Packet_0xd0
	{
		const short Header = 0xd0;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x008868F0


Packet 0x00D1
	TemplateSize: 3

	Template: 0x000000D1 0x00000204 0x00000404 

	DecodedTemplate: 
	struct Packet_0xd1
	{
		const short Header = 0xd1;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00886910


Packet 0x00D2
	TemplateSize: 2

	Template: 0x000000D2 0x00000204 

	DecodedTemplate: 
	struct Packet_0xd2
	{
		const short Header = 0xd2;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00886930


Packet 0x00D3
	TemplateSize: 3

	Template: 0x000000D3 0x00000010 0x00000404 

	DecodedTemplate: 
	struct Packet_0xd3
	{
		const short Header = 0xd3;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00886940


Packet 0x00D4
	TemplateSize: 4

	Template: 0x000000D4 0x00000104 0x0000102B 0x00000006 

	DecodedTemplate: 
	struct Packet_0xd4
	{
		const short Header = 0xd4;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		short length;	//MaxLength: 16		//Size in Packet: 4 bytes
		DWORD[length]	//MaxLength: 16		//Size in Packet: 4 * length bytes MaxSize in Packet: 64bytes
	}


	Handler: 0x00886960


Packet 0x00D5
	TemplateSize: 2

	Template: 0x000000D5 0x00000104 

	DecodedTemplate: 
	struct Packet_0xd5
	{
		const short Header = 0xd5;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x00886990


Packet 0x00D6
	TemplateSize: 4

	Template: 0x000000D6 0x00000010 0x00000204 0x00000404 

	DecodedTemplate: 
	struct Packet_0xd6
	{
		const short Header = 0xd6;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x008869A0


Packet 0x00D7
	TemplateSize: 4

	Template: 0x000000D7 0x00000010 0x00000204 0x00000404 

	DecodedTemplate: 
	struct Packet_0xd7
	{
		const short Header = 0xd7;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x008869A0


Packet 0x00D8
	TemplateSize: 4

	Template: 0x000000D8 0x00000010 0x00000204 0x00000404 

	DecodedTemplate: 
	struct Packet_0xd8
	{
		const short Header = 0xd8;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x008869C0


Packet 0x00D9
	TemplateSize: 5

	Template: 0x000000D9 0x00000010 0x00000204 0x00000404 
		0x00000404 

	DecodedTemplate: 
	struct Packet_0xd9
	{
		const short Header = 0xd9;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x008869E0


Packet 0x00DA
	TemplateSize: 4

	Template: 0x000000DA 0x00000010 0x00000204 0x00000404 

	DecodedTemplate: 
	struct Packet_0xda
	{
		const short Header = 0xda;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00886A00


Packet 0x00DB
	TemplateSize: 4

	Template: 0x000000DB 0x00000010 0x00000204 0x00000404 

	DecodedTemplate: 
	struct Packet_0xdb
	{
		const short Header = 0xdb;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00886A20


Packet 0x00DC
	TemplateSize: 6

	Template: 0x000000DC 0x00000010 0x00000204 0x00000404 
		0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0xdc
	{
		const short Header = 0xdc;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00886A40


Packet 0x00DD
	TemplateSize: 16

	Template: 0x000000DD 0x00000404 0x00000404 0x00000404 
		0x00000404 0x00000404 0x00000404 0x00000404 0x00000404 
		0x00000404 0x00000404 0x00000404 0x00000404 
		0x00000404 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0xdd
	{
		const short Header = 0xdd;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00886A60


Packet 0x00DE
	TemplateSize: 2

	Template: 0x000000DE 0x00000404 

	DecodedTemplate: 
	struct Packet_0xde
	{
		const short Header = 0xde;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00886A70


Packet 0x00DF
	TemplateSize: 2

	Template: 0x000000DF 0x00000404 

	DecodedTemplate: 
	struct Packet_0xdf
	{
		const short Header = 0xdf;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00886A80


Packet 0x00E0
	TemplateSize: 2

	Template: 0x000000E0 0x00000404 

	DecodedTemplate: 
	struct Packet_0xe0
	{
		const short Header = 0xe0;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00886A90


Packet 0x00E1
	TemplateSize: 2

	Template: 0x000000E1 0x00000404 

	DecodedTemplate: 
	struct Packet_0xe1
	{
		const short Header = 0xe1;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00886AA0


Packet 0x00E2
	TemplateSize: 3

	Template: 0x000000E2 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0xe2
	{
		const short Header = 0xe2;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00886AB0


Packet 0x00E3
	TemplateSize: 3

	Template: 0x000000E3 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0xe3
	{
		const short Header = 0xe3;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00886AD0


Packet 0x00E4
	TemplateSize: 3

	Template: 0x000000E4 0x00000010 0x00000404 

	DecodedTemplate: 
	struct Packet_0xe4
	{
		const short Header = 0xe4;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00886AF0


Packet 0x00E5
	TemplateSize: 3

	Template: 0x000000E5 0x00000010 0x00000404 

	DecodedTemplate: 
	struct Packet_0xe5
	{
		const short Header = 0xe5;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00886B10


Packet 0x00E6
	TemplateSize: 2

	Template: 0x000000E6 0x00000404 

	DecodedTemplate: 
	struct Packet_0xe6
	{
		const short Header = 0xe6;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00886B30


Packet 0x00E7
	TemplateSize: 5

	Template: 0x000000E7 0x00000404 0x00000404 0x00000404 
		0x00000817 

	DecodedTemplate: 
	struct Packet_0xe7
	{
		const short Header = 0xe7;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 8		//Size in Packet: 4 bytes
		wchar_t[8]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x00886B40


Packet 0x00E8
	TemplateSize: 3

	Template: 0x000000E8 0x00000204 0x00000404 

	DecodedTemplate: 
	struct Packet_0xe8
	{
		const short Header = 0xe8;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00886B70


Packet 0x00E9
	TemplateSize: 3

	Template: 0x000000E9 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0xe9
	{
		const short Header = 0xe9;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00886B90


Packet 0x00EA
	TemplateSize: 12

	Template: 0x000000EA 0x00000404 0x00000404 0x00000404 
		0x00000404 0x00000404 0x00000404 0x00000404 0x00000404 
		0x00000404 0x00000817 0x00000817 

	DecodedTemplate: 
	struct Packet_0xea
	{
		const short Header = 0xea;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 8		//Size in Packet: 4 bytes
		wchar_t[8]		//Size in Packet: 2 * string_length bytes
		//short string_length;	//MaxLength: 8		//Size in Packet: 4 bytes
		wchar_t[8]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x00886BB0


Packet 0x00EB
	TemplateSize: 3

	Template: 0x000000EB 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0xeb
	{
		const short Header = 0xeb;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00886C10


Packet 0x00EC
	TemplateSize: 2

	Template: 0x000000EC 0x00000010 

	DecodedTemplate: 
	struct Packet_0xec
	{
		const short Header = 0xec;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
	}


	Handler: 0x00886C30


Packet 0x00ED
	TemplateSize: 3

	Template: 0x000000ED 0x0000102B 0x00000006 

	DecodedTemplate: 
	struct Packet_0xed
	{
		const short Header = 0xed;		//Size in Packet: 4 bytes
		short length;	//MaxLength: 16		//Size in Packet: 4 bytes
		DWORD[length]	//MaxLength: 16		//Size in Packet: 4 * length bytes MaxSize in Packet: 64bytes
	}


	Handler: 0x00886840


Packet 0x00EE
	TemplateSize: 3

	Template: 0x000000EE 0x0000202B 0x00000006 

	DecodedTemplate: 
	struct Packet_0xee
	{
		const short Header = 0xee;		//Size in Packet: 4 bytes
		short length;	//MaxLength: 32		//Size in Packet: 4 bytes
		DWORD[length]	//MaxLength: 32		//Size in Packet: 4 * length bytes MaxSize in Packet: 128bytes
	}


	Handler: 0x00886C40


Packet 0x00EF
	TemplateSize: 4

	Template: 0x000000EF 0x00000204 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0xef
	{
		const short Header = 0xef;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00886C60


Packet 0x00F0
	TemplateSize: 3

	Template: 0x000000F0 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0xf0
	{
		const short Header = 0xf0;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00886C80


Packet 0x00F1
	TemplateSize: 3

	Template: 0x000000F1 0x00002017 0x00000104 

	DecodedTemplate: 
	struct Packet_0xf1
	{
		const short Header = 0xf1;		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 32		//Size in Packet: 4 bytes
		wchar_t[32]		//Size in Packet: 2 * string_length bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x00886CA0


Packet 0x00F2
	TemplateSize: 0

	Template: 

	DecodedTemplate: 


	Handler: 0x00000000


Packet 0x00F3
	TemplateSize: 0

	Template: 

	DecodedTemplate: 


	Handler: 0x00000000


Packet 0x00F4
	TemplateSize: 1

	Template: 0x000000F4 

	DecodedTemplate: 
	struct Packet_0xf4
	{
		const short Header = 0xf4;		//Size in Packet: 4 bytes
	}


	Handler: 0x00888C10


Packet 0x00F5
	TemplateSize: 3

	Template: 0x000000F5 0x00000104 0x00000104 

	DecodedTemplate: 
	struct Packet_0xf5
	{
		const short Header = 0xf5;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x00888C20


Packet 0x00F6
	TemplateSize: 2

	Template: 0x000000F6 0x00000104 

	DecodedTemplate: 
	struct Packet_0xf6
	{
		const short Header = 0xf6;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x00888C40


Packet 0x00F7
	TemplateSize: 2

	Template: 0x000000F7 0x00000104 

	DecodedTemplate: 
	struct Packet_0xf7
	{
		const short Header = 0xf7;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x00888C50


Packet 0x00F8
	TemplateSize: 4

	Template: 0x000000F8 0x00000404 0x00000204 0x00005017 

	DecodedTemplate: 
	struct Packet_0xf8
	{
		const short Header = 0xf8;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 80		//Size in Packet: 4 bytes
		wchar_t[80]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x00888C60


Packet 0x00F9
	TemplateSize: 1

	Template: 0x000000F9 

	DecodedTemplate: 
	struct Packet_0xf9
	{
		const short Header = 0xf9;		//Size in Packet: 4 bytes
	}


	Handler: 0x00888C80


Packet 0x00FA
	TemplateSize: 3

	Template: 0x000000FA 0x0004000B 0x00000006 

	DecodedTemplate: 
	struct Packet_0xfa
	{
		const short Header = 0xfa;		//Size in Packet: 4 bytes
		short length;	//MaxLength: 1024		//Size in Packet: 4 bytes
		BYTE[length]	//MaxLength: 1024		//Size in Packet: 1 * length bytes MaxSize in Packet: 1024bytes
	}


	Handler: 0x00888C90


Packet 0x00FB
	TemplateSize: 1

	Template: 0x000000FB 

	DecodedTemplate: 
	struct Packet_0xfb
	{
		const short Header = 0xfb;		//Size in Packet: 4 bytes
	}


	Handler: 0x00888CB0


Packet 0x00FC
	TemplateSize: 2

	Template: 0x000000FC 0x00000404 

	DecodedTemplate: 
	struct Packet_0xfc
	{
		const short Header = 0xfc;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007DBAE0


Packet 0x00FD
	TemplateSize: 6

	Template: 0x000000FD 0x00000010 0x00000404 0x00000404 
		0x00000104 0x00002017 

	DecodedTemplate: 
	struct Packet_0xfd
	{
		const short Header = 0xfd;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 32		//Size in Packet: 4 bytes
		wchar_t[32]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x008894D0


Packet 0x00FE
	TemplateSize: 2

	Template: 0x000000FE 0x00000010 

	DecodedTemplate: 
	struct Packet_0xfe
	{
		const short Header = 0xfe;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
	}


	Handler: 0x00889500


Packet 0x00FF
	TemplateSize: 3

	Template: 0x000000FF 0x00000404 0x00007A17 

	DecodedTemplate: 
	struct Packet_0xff
	{
		const short Header = 0xff;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 122		//Size in Packet: 4 bytes
		wchar_t[122]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x00889510


Packet 0x0100
	TemplateSize: 5

	Template: 0x00000100 0x00000104 0x00007A17 0x00000404 
		0x00000204 

	DecodedTemplate: 
	struct Packet_0x100
	{
		const short Header = 0x100;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 122		//Size in Packet: 4 bytes
		wchar_t[122]		//Size in Packet: 2 * string_length bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00889530


Packet 0x0101
	TemplateSize: 2

	Template: 0x00000101 0x00007A17 

	DecodedTemplate: 
	struct Packet_0x101
	{
		const short Header = 0x101;		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 122		//Size in Packet: 4 bytes
		wchar_t[122]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x00889570


Packet 0x0102
	TemplateSize: 2

	Template: 0x00000102 0x00000404 

	DecodedTemplate: 
	struct Packet_0x102
	{
		const short Header = 0x102;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x008896C0


Packet 0x0103
	TemplateSize: 2

	Template: 0x00000103 0x00000404 

	DecodedTemplate: 
	struct Packet_0x103
	{
		const short Header = 0x103;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00889710


Packet 0x0104
	TemplateSize: 4

	Template: 0x00000104 0x00000204 0x00000104 0x00000404 

	DecodedTemplate: 
	struct Packet_0x104
	{
		const short Header = 0x104;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00889720


Packet 0x0105
	TemplateSize: 3

	Template: 0x00000105 0x00000204 0x00000104 

	DecodedTemplate: 
	struct Packet_0x105
	{
		const short Header = 0x105;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x00889740


Packet 0x0106
	TemplateSize: 3

	Template: 0x00000106 0x00000204 0x00000404 

	DecodedTemplate: 
	struct Packet_0x106
	{
		const short Header = 0x106;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00889760


Packet 0x0107
	TemplateSize: 4

	Template: 0x00000107 0x00000204 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0x107
	{
		const short Header = 0x107;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00889780


Packet 0x0108
	TemplateSize: 3

	Template: 0x00000108 0x00000404 0x00000104 

	DecodedTemplate: 
	struct Packet_0x108
	{
		const short Header = 0x108;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x008897A0


Packet 0x0109
	TemplateSize: 3

	Template: 0x00000109 0x00000404 0x00002017 

	DecodedTemplate: 
	struct Packet_0x109
	{
		const short Header = 0x109;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 32		//Size in Packet: 4 bytes
		wchar_t[32]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x008897C0


Packet 0x010A
	TemplateSize: 3

	Template: 0x0000010A 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0x10a
	{
		const short Header = 0x10a;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x008897E0


Packet 0x010B
	TemplateSize: 3

	Template: 0x0000010B 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0x10b
	{
		const short Header = 0x10b;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00889800


Packet 0x010C
	TemplateSize: 5

	Template: 0x0000010C 0x00000204 0x00001005 0x00000104 
		0x00000404 

	DecodedTemplate: 
	struct Packet_0x10c
	{
		const short Header = 0x10c;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE[16]		//Size in Packet: 16 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007EC1E0


Packet 0x010D
	TemplateSize: 2

	Template: 0x0000010D 0x00001005 

	DecodedTemplate: 
	struct Packet_0x10d
	{
		const short Header = 0x10d;		//Size in Packet: 4 bytes
		BYTE[16]		//Size in Packet: 16 bytes
	}


	Handler: 0x007EC290


Packet 0x010E
	TemplateSize: 4

	Template: 0x0000010E 0x00000204 0x00001005 0x00000104 

	DecodedTemplate: 
	struct Packet_0x10e
	{
		const short Header = 0x10e;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE[16]		//Size in Packet: 16 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x007EC600


Packet 0x010F
	TemplateSize: 1

	Template: 0x0000010F 

	DecodedTemplate: 
	struct Packet_0x10f
	{
		const short Header = 0x10f;		//Size in Packet: 4 bytes
	}


	Handler: 0x007EC6F0


Packet 0x0110
	TemplateSize: 14

	Template: 0x00000110 0x00000204 0x00000104 0x00000104 
		0x00000404 0x00002017 0x00000617 0x00000104 0x00000104 
		0x00000104 0x00000104 0x00000104 0x00000204 
		0x00000104 

	DecodedTemplate: 
	struct Packet_0x110
	{
		const short Header = 0x110;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 32		//Size in Packet: 4 bytes
		wchar_t[32]		//Size in Packet: 2 * string_length bytes
		//short string_length;	//MaxLength: 6		//Size in Packet: 4 bytes
		wchar_t[6]		//Size in Packet: 2 * string_length bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x007EC410


Packet 0x0111
	TemplateSize: 3

	Template: 0x00000111 0x00000404 0x00000104 

	DecodedTemplate: 
	struct Packet_0x111
	{
		const short Header = 0x111;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x007EC480


Packet 0x0112
	TemplateSize: 1

	Template: 0x00000112 

	DecodedTemplate: 
	struct Packet_0x112
	{
		const short Header = 0x112;		//Size in Packet: 4 bytes
	}


	Handler: 0x007EC4F0


Packet 0x0113
	TemplateSize: 2

	Template: 0x00000113 0x00000104 

	DecodedTemplate: 
	struct Packet_0x113
	{
		const short Header = 0x113;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x007EC4B0


Packet 0x0114
	TemplateSize: 3

	Template: 0x00000114 0x00000204 0x00000404 

	DecodedTemplate: 
	struct Packet_0x114
	{
		const short Header = 0x114;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007EC530


Packet 0x0115
	TemplateSize: 3

	Template: 0x00000115 0x00000404 0x00004017 

	DecodedTemplate: 
	struct Packet_0x115
	{
		const short Header = 0x115;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 64		//Size in Packet: 4 bytes
		wchar_t[64]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x007EC5C0


Packet 0x0116
	TemplateSize: 16

	Template: 0x00000116 0x00000204 0x00001005 0x00002017 
		0x00000617 0x00000104 0x00000104 0x00000104 0x00000104 
		0x00000104 0x00000104 0x00000204 0x00000104 
		0x00000104 0x00000404 0x00000104 

	DecodedTemplate: 
	struct Packet_0x116
	{
		const short Header = 0x116;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE[16]		//Size in Packet: 16 bytes
		//short string_length;	//MaxLength: 32		//Size in Packet: 4 bytes
		wchar_t[32]		//Size in Packet: 2 * string_length bytes
		//short string_length;	//MaxLength: 6		//Size in Packet: 4 bytes
		wchar_t[6]		//Size in Packet: 2 * string_length bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x007EC770


Packet 0x0117
	TemplateSize: 20

	Template: 0x00000117 0x00000204 0x00001005 0x00002017 
		0x00000617 0x00000104 0x00000104 0x00000104 0x00000104 
		0x00000104 0x00000104 0x00000104 0x00000204 
		0x00000104 0x00000104 0x00000404 0x00000404 
		0x00000404 0x00000404 0x00000104 

	DecodedTemplate: 
	struct Packet_0x117
	{
		const short Header = 0x117;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE[16]		//Size in Packet: 16 bytes
		//short string_length;	//MaxLength: 32		//Size in Packet: 4 bytes
		wchar_t[32]		//Size in Packet: 2 * string_length bytes
		//short string_length;	//MaxLength: 6		//Size in Packet: 4 bytes
		wchar_t[6]		//Size in Packet: 2 * string_length bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x007EC830


Packet 0x0118
	TemplateSize: 4

	Template: 0x00000118 0x00000204 0x00000104 0x00000404 

	DecodedTemplate: 
	struct Packet_0x118
	{
		const short Header = 0x118;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007EC910


Packet 0x0119
	TemplateSize: 8

	Template: 0x00000119 0x00001005 0x00002017 0x00000617 
		0x00001417 0x00000404 0x00000404 0x00000104 

	DecodedTemplate: 
	struct Packet_0x119
	{
		const short Header = 0x119;		//Size in Packet: 4 bytes
		BYTE[16]		//Size in Packet: 16 bytes
		//short string_length;	//MaxLength: 32		//Size in Packet: 4 bytes
		wchar_t[32]		//Size in Packet: 2 * string_length bytes
		//short string_length;	//MaxLength: 6		//Size in Packet: 4 bytes
		wchar_t[6]		//Size in Packet: 2 * string_length bytes
		//short string_length;	//MaxLength: 20		//Size in Packet: 4 bytes
		wchar_t[20]		//Size in Packet: 2 * string_length bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x007ECC40


Packet 0x011A
	TemplateSize: 3

	Template: 0x0000011A 0x00001005 0x00000104 

	DecodedTemplate: 
	struct Packet_0x11a
	{
		const short Header = 0x11a;		//Size in Packet: 4 bytes
		BYTE[16]		//Size in Packet: 16 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x007ECC90


Packet 0x011B
	TemplateSize: 3

	Template: 0x0000011B 0x00000204 0x00000404 

	DecodedTemplate: 
	struct Packet_0x11b
	{
		const short Header = 0x11b;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007EC9B0


Packet 0x011C
	TemplateSize: 3

	Template: 0x0000011C 0x00000204 0x00000104 

	DecodedTemplate: 
	struct Packet_0x11c
	{
		const short Header = 0x11c;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x007ECA40


Packet 0x011D
	TemplateSize: 10

	Template: 0x0000011D 0x00001417 0x00001417 0x00001417 
		0x00004017 0x00000404 0x00000404 0x00000404 0x00000404 
		0x00000104 

	DecodedTemplate: 
	struct Packet_0x11d
	{
		const short Header = 0x11d;		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 20		//Size in Packet: 4 bytes
		wchar_t[20]		//Size in Packet: 2 * string_length bytes
		//short string_length;	//MaxLength: 20		//Size in Packet: 4 bytes
		wchar_t[20]		//Size in Packet: 2 * string_length bytes
		//short string_length;	//MaxLength: 20		//Size in Packet: 4 bytes
		wchar_t[20]		//Size in Packet: 2 * string_length bytes
		//short string_length;	//MaxLength: 64		//Size in Packet: 4 bytes
		wchar_t[64]		//Size in Packet: 2 * string_length bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x007ECCD0


Packet 0x011E
	TemplateSize: 2

	Template: 0x0000011E 0x00001417 

	DecodedTemplate: 
	struct Packet_0x11e
	{
		const short Header = 0x11e;		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 20		//Size in Packet: 4 bytes
		wchar_t[20]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x007ECD30


Packet 0x011F
	TemplateSize: 2

	Template: 0x0000011F 0x00001417 

	DecodedTemplate: 
	struct Packet_0x11f
	{
		const short Header = 0x11f;		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 20		//Size in Packet: 4 bytes
		wchar_t[20]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x007ECD70


Packet 0x0120
	TemplateSize: 2

	Template: 0x00000120 0x00001417 

	DecodedTemplate: 
	struct Packet_0x120
	{
		const short Header = 0x120;		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 20		//Size in Packet: 4 bytes
		wchar_t[20]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x007ECDD0


Packet 0x0121
	TemplateSize: 3

	Template: 0x00000121 0x00000404 0x00004017 

	DecodedTemplate: 
	struct Packet_0x121
	{
		const short Header = 0x121;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 64		//Size in Packet: 4 bytes
		wchar_t[64]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x007ECED0


Packet 0x0122
	TemplateSize: 3

	Template: 0x00000122 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0x122
	{
		const short Header = 0x122;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007ECF30


Packet 0x0123
	TemplateSize: 2

	Template: 0x00000123 0x00000104 

	DecodedTemplate: 
	struct Packet_0x123
	{
		const short Header = 0x123;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x007ECF90


Packet 0x0124
	TemplateSize: 2

	Template: 0x00000124 0x00000204 

	DecodedTemplate: 
	struct Packet_0x124
	{
		const short Header = 0x124;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007ECAD0


Packet 0x0125
	TemplateSize: 3

	Template: 0x00000125 0x00010017 0x00001417 

	DecodedTemplate: 
	struct Packet_0x125
	{
		const short Header = 0x125;		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 256		//Size in Packet: 4 bytes
		wchar_t[256]		//Size in Packet: 2 * string_length bytes
		//short string_length;	//MaxLength: 20		//Size in Packet: 4 bytes
		wchar_t[20]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x007ECFF0


Packet 0x0126
	TemplateSize: 3

	Template: 0x00000126 0x00000204 0x00000404 

	DecodedTemplate: 
	struct Packet_0x126
	{
		const short Header = 0x126;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007ECB10


Packet 0x0127
	TemplateSize: 1

	Template: 0x00000127 

	DecodedTemplate: 
	struct Packet_0x127
	{
		const short Header = 0x127;		//Size in Packet: 4 bytes
	}


	Handler: 0x007ECBA0


Packet 0x0128
	TemplateSize: 3

	Template: 0x00000128 0x00000404 0x00000104 

	DecodedTemplate: 
	struct Packet_0x128
	{
		const short Header = 0x128;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x007ED090


Packet 0x0129
	TemplateSize: 2

	Template: 0x00000129 0x00000404 

	DecodedTemplate: 
	struct Packet_0x129
	{
		const short Header = 0x129;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007ED0C0


Packet 0x012A
	TemplateSize: 1

	Template: 0x0000012A 

	DecodedTemplate: 
	struct Packet_0x12a
	{
		const short Header = 0x12a;		//Size in Packet: 4 bytes
	}


	Handler: 0x007ECC20


Packet 0x012B
	TemplateSize: 4

	Template: 0x0000012B 0x00000404 0x00000204 0x00000404 

	DecodedTemplate: 
	struct Packet_0x12b
	{
		const short Header = 0x12b;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007F34B0


Packet 0x012C
	TemplateSize: 2

	Template: 0x0000012C 0x00000404 

	DecodedTemplate: 
	struct Packet_0x12c
	{
		const short Header = 0x12c;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007F3560


Packet 0x012D
	TemplateSize: 3

	Template: 0x0000012D 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0x12d
	{
		const short Header = 0x12d;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007F3590


Packet 0x012E
	TemplateSize: 7

	Template: 0x0000012E 0x00000404 0x00000104 0x00000817 
		0x00000817 0x00000817 0x00000817 

	DecodedTemplate: 
	struct Packet_0x12e
	{
		const short Header = 0x12e;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 8		//Size in Packet: 4 bytes
		wchar_t[8]		//Size in Packet: 2 * string_length bytes
		//short string_length;	//MaxLength: 8		//Size in Packet: 4 bytes
		wchar_t[8]		//Size in Packet: 2 * string_length bytes
		//short string_length;	//MaxLength: 8		//Size in Packet: 4 bytes
		wchar_t[8]		//Size in Packet: 2 * string_length bytes
		//short string_length;	//MaxLength: 8		//Size in Packet: 4 bytes
		wchar_t[8]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x007F35C0


Packet 0x012F
	TemplateSize: 3

	Template: 0x0000012F 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0x12f
	{
		const short Header = 0x12f;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007F3600


Packet 0x0130
	TemplateSize: 3

	Template: 0x00000130 0x00000404 0x00002017 

	DecodedTemplate: 
	struct Packet_0x130
	{
		const short Header = 0x130;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 32		//Size in Packet: 4 bytes
		wchar_t[32]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x007F37A0


Packet 0x0131
	TemplateSize: 3

	Template: 0x00000131 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0x131
	{
		const short Header = 0x131;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007F3840


Packet 0x0132
	TemplateSize: 3

	Template: 0x00000132 0x00000104 0x00000404 

	DecodedTemplate: 
	struct Packet_0x132
	{
		const short Header = 0x132;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007F3870


Packet 0x0133
	TemplateSize: 4

	Template: 0x00000133 0x00000404 0x00000204 0x00000104 

	DecodedTemplate: 
	struct Packet_0x133
	{
		const short Header = 0x133;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x005B39D0


Packet 0x0134
	TemplateSize: 5

	Template: 0x00000134 0x00000204 0x00000404 0x00000204 
		0x00000104 

	DecodedTemplate: 
	struct Packet_0x134
	{
		const short Header = 0x134;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x007F38B0


Packet 0x0135
	TemplateSize: 7

	Template: 0x00000135 0x00000204 0x00000104 0x00000104 
		0x00000204 0x00000104 0x00000404 

	DecodedTemplate: 
	struct Packet_0x135
	{
		const short Header = 0x135;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007F39F0


Packet 0x0136
	TemplateSize: 3

	Template: 0x00000136 0x00000204 0x00000404 

	DecodedTemplate: 
	struct Packet_0x136
	{
		const short Header = 0x136;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007F3B70


Packet 0x0137
	TemplateSize: 3

	Template: 0x00000137 0x00000204 0x00000404 

	DecodedTemplate: 
	struct Packet_0x137
	{
		const short Header = 0x137;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007F3C50


Packet 0x0138
	TemplateSize: 2

	Template: 0x00000138 0x00000204 

	DecodedTemplate: 
	struct Packet_0x138
	{
		const short Header = 0x138;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007F3D30


Packet 0x0139
	TemplateSize: 3

	Template: 0x00000139 0x00000204 0x00000204 

	DecodedTemplate: 
	struct Packet_0x139
	{
		const short Header = 0x139;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007F3D60


Packet 0x013A
	TemplateSize: 3

	Template: 0x0000013A 0x00000204 0x00000104 

	DecodedTemplate: 
	struct Packet_0x13a
	{
		const short Header = 0x13a;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x007F3E70


Packet 0x013B
	TemplateSize: 2

	Template: 0x0000013B 0x00000204 

	DecodedTemplate: 
	struct Packet_0x13b
	{
		const short Header = 0x13b;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007F3F50


Packet 0x013C
	TemplateSize: 6

	Template: 0x0000013C 0x00000204 0x00000104 0x00000204 
		0x00000104 0x00000404 

	DecodedTemplate: 
	struct Packet_0x13c
	{
		const short Header = 0x13c;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007F4030


Packet 0x013D
	TemplateSize: 5

	Template: 0x0000013D 0x00000204 0x00000104 0x00000404 
		0x00000404 

	DecodedTemplate: 
	struct Packet_0x13d
	{
		const short Header = 0x13d;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007F4160


Packet 0x013E
	TemplateSize: 3

	Template: 0x0000013E 0x00000204 0x00000104 

	DecodedTemplate: 
	struct Packet_0x13e
	{
		const short Header = 0x13e;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x007F4290


Packet 0x013F
	TemplateSize: 4

	Template: 0x0000013F 0x00000204 0x00000204 0x00000104 

	DecodedTemplate: 
	struct Packet_0x13f
	{
		const short Header = 0x13f;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x007F4370


Packet 0x0140
	TemplateSize: 0

	Template: 

	DecodedTemplate: 


	Handler: 0x00000000


Packet 0x0141
	TemplateSize: 5

	Template: 0x00000141 0x00000204 0x00000404 0x00000204 
		0x00000104 

	DecodedTemplate: 
	struct Packet_0x141
	{
		const short Header = 0x141;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x007F4490


Packet 0x0142
	TemplateSize: 4

	Template: 0x00000142 0x00000204 0x00000104 0x00000104 

	DecodedTemplate: 
	struct Packet_0x142
	{
		const short Header = 0x142;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x007F45F0


Packet 0x0143
	TemplateSize: 3

	Template: 0x00000143 0x00000204 0x00000404 

	DecodedTemplate: 
	struct Packet_0x143
	{
		const short Header = 0x143;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007F46F0


Packet 0x0144
	TemplateSize: 3

	Template: 0x00000144 0x00000204 0x00000204 

	DecodedTemplate: 
	struct Packet_0x144
	{
		const short Header = 0x144;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007F4820


Packet 0x0145
	TemplateSize: 3

	Template: 0x00000145 0x00000204 0x00000404 

	DecodedTemplate: 
	struct Packet_0x145
	{
		const short Header = 0x145;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007F4940


Packet 0x0146
	TemplateSize: 3

	Template: 0x00000146 0x00000204 0x00000404 

	DecodedTemplate: 
	struct Packet_0x146
	{
		const short Header = 0x146;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007F4A30


Packet 0x0147
	TemplateSize: 3

	Template: 0x00000147 0x00000204 0x00000404 

	DecodedTemplate: 
	struct Packet_0x147
	{
		const short Header = 0x147;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007F4B20


Packet 0x0148
	TemplateSize: 4

	Template: 0x00000148 0x00000204 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0x148
	{
		const short Header = 0x148;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007F4C30


Packet 0x0149
	TemplateSize: 5

	Template: 0x00000149 0x00000204 0x00000404 0x00000204 
		0x00000104 

	DecodedTemplate: 
	struct Packet_0x149
	{
		const short Header = 0x149;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x007F4D90


Packet 0x014A
	TemplateSize: 4

	Template: 0x0000014A 0x00000404 0x00000104 0x00000104 

	DecodedTemplate: 
	struct Packet_0x14a
	{
		const short Header = 0x14a;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x007F5660


Packet 0x014B
	TemplateSize: 3

	Template: 0x0000014B 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0x14b
	{
		const short Header = 0x14b;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007F5690


Packet 0x014C
	TemplateSize: 2

	Template: 0x0000014C 0x00000404 

	DecodedTemplate: 
	struct Packet_0x14c
	{
		const short Header = 0x14c;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007F56F0


Packet 0x014D
	TemplateSize: 5

	Template: 0x0000014D 0x00000404 0x00000404 0x00000404 
		0x00000404 

	DecodedTemplate: 
	struct Packet_0x14d
	{
		const short Header = 0x14d;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007F5730


Packet 0x014E
	TemplateSize: 3

	Template: 0x0000014E 0x00000104 0x00000104 

	DecodedTemplate: 
	struct Packet_0x14e
	{
		const short Header = 0x14e;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x007F5760


Packet 0x014F
	TemplateSize: 3

	Template: 0x0000014F 0x00000404 0x00000204 

	DecodedTemplate: 
	struct Packet_0x14f
	{
		const short Header = 0x14f;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007F4EA0


Packet 0x0150
	TemplateSize: 3

	Template: 0x00000150 0x00000404 0x00000104 

	DecodedTemplate: 
	struct Packet_0x150
	{
		const short Header = 0x150;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x007F4F10


Packet 0x0151
	TemplateSize: 3

	Template: 0x00000151 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0x151
	{
		const short Header = 0x151;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007F4F60


Packet 0x0152
	TemplateSize: 10

	Template: 0x00000152 0x00000204 0x0000070C 0x00000104 
		0x00000204 0x00000104 0x00000204 0x00000204 0x00000204 
		0x00000204 

	DecodedTemplate: 
	struct Packet_0x152
	{
		const short Header = 0x152;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE ArraySize;	//MaxSize: 7		//Size in Packet: 4 bytes
		BYTE[ArraySize]	//Mask: 0x000000ff		//Size in Packet: 4 bytes / element
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007F4F90


Packet 0x0153
	TemplateSize: 3

	Template: 0x00000153 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0x153
	{
		const short Header = 0x153;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007F50C0


Packet 0x0154
	TemplateSize: 10

	Template: 0x00000154 0x00000404 0x00000404 0x00000104 
		0x00000104 0x00000204 0x00000204 0x00000104 0x00000404 
		0x00000404 

	DecodedTemplate: 
	struct Packet_0x154
	{
		const short Header = 0x154;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007F5190


Packet 0x0155
	TemplateSize: 10

	Template: 0x00000155 0x00000404 0x00000404 0x00000104 
		0x00000104 0x00000204 0x00000204 0x00000104 0x00000404 
		0x00000404 

	DecodedTemplate: 
	struct Packet_0x155
	{
		const short Header = 0x155;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007F5250


Packet 0x0156
	TemplateSize: 7

	Template: 0x00000156 0x00000404 0x00000404 0x00000404 
		0x00004017 0x0000400C 0x00000404 

	DecodedTemplate: 
	struct Packet_0x156
	{
		const short Header = 0x156;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 64		//Size in Packet: 4 bytes
		wchar_t[64]		//Size in Packet: 2 * string_length bytes
		BYTE ArraySize;	//MaxSize: 64		//Size in Packet: 4 bytes
		DWORD[ArraySize]	//Mask: 0xffffffff		//Size in Packet: 4 bytes / element
	}


	Handler: 0x007F5340


Packet 0x0157
	TemplateSize: 15

	Template: 0x00000157 0x00000404 0x00000404 0x00000104 
		0x00000104 0x00000204 0x00000204 0x00000104 0x00000404 
		0x00000404 0x00000404 0x00000404 0x00004017 
		0x0000400C 0x00000404 

	DecodedTemplate: 
	struct Packet_0x157
	{
		const short Header = 0x157;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 64		//Size in Packet: 4 bytes
		wchar_t[64]		//Size in Packet: 2 * string_length bytes
		BYTE ArraySize;	//MaxSize: 64		//Size in Packet: 4 bytes
		DWORD[ArraySize]	//Mask: 0xffffffff		//Size in Packet: 4 bytes / element
	}


	Handler: 0x007F5380


Packet 0x0158
	TemplateSize: 15

	Template: 0x00000158 0x00000404 0x00000404 0x00000104 
		0x00000104 0x00000204 0x00000204 0x00000104 0x00000404 
		0x00000404 0x00000404 0x00000404 0x00004017 
		0x0000400C 0x00000404 

	DecodedTemplate: 
	struct Packet_0x158
	{
		const short Header = 0x158;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 64		//Size in Packet: 4 bytes
		wchar_t[64]		//Size in Packet: 2 * string_length bytes
		BYTE ArraySize;	//MaxSize: 64		//Size in Packet: 4 bytes
		DWORD[ArraySize]	//Mask: 0xffffffff		//Size in Packet: 4 bytes / element
	}


	Handler: 0x007F5470


Packet 0x0159
	TemplateSize: 5

	Template: 0x00000159 0x00000204 0x00000404 0x0000032B 
		0x00000006 

	DecodedTemplate: 
	struct Packet_0x159
	{
		const short Header = 0x159;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		short length;	//MaxLength: 3		//Size in Packet: 4 bytes
		DWORD[length]	//MaxLength: 3		//Size in Packet: 4 * length bytes MaxSize in Packet: 12bytes
	}


	Handler: 0x007F5590


Packet 0x015A
	TemplateSize: 1

	Template: 0x0000015A 

	DecodedTemplate: 
	struct Packet_0x15a
	{
		const short Header = 0x15a;		//Size in Packet: 4 bytes
	}


	Handler: 0x007F55D0


Packet 0x015B
	TemplateSize: 1

	Template: 0x0000015B 

	DecodedTemplate: 
	struct Packet_0x15b
	{
		const short Header = 0x15b;		//Size in Packet: 4 bytes
	}


	Handler: 0x007F55F0


Packet 0x015C
	TemplateSize: 1

	Template: 0x0000015C 

	DecodedTemplate: 
	struct Packet_0x15c
	{
		const short Header = 0x15c;		//Size in Packet: 4 bytes
	}


	Handler: 0x007F5610


Packet 0x015D
	TemplateSize: 2

	Template: 0x0000015D 0x00000104 

	DecodedTemplate: 
	struct Packet_0x15d
	{
		const short Header = 0x15d;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x007F5630


Packet 0x015E
	TemplateSize: 3

	Template: 0x0000015E 0x00000204 0x00000204 

	DecodedTemplate: 
	struct Packet_0x15e
	{
		const short Header = 0x15e;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007F5790


Packet 0x015F
	TemplateSize: 3

	Template: 0x0000015F 0x00000104 0x00000404 

	DecodedTemplate: 
	struct Packet_0x15f
	{
		const short Header = 0x15f;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007F57B0


Packet 0x0160
	TemplateSize: 5

	Template: 0x00000160 0x00000204 0x00000404 0x0000032B 
		0x00000006 

	DecodedTemplate: 
	struct Packet_0x160
	{
		const short Header = 0x160;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		short length;	//MaxLength: 3		//Size in Packet: 4 bytes
		DWORD[length]	//MaxLength: 3		//Size in Packet: 4 * length bytes MaxSize in Packet: 12bytes
	}


	Handler: 0x007F57E0


Packet 0x0161
	TemplateSize: 1

	Template: 0x00000161 

	DecodedTemplate: 
	struct Packet_0x161
	{
		const short Header = 0x161;		//Size in Packet: 4 bytes
	}


	Handler: 0x007F5820


Packet 0x0162
	TemplateSize: 1

	Template: 0x00000162 

	DecodedTemplate: 
	struct Packet_0x162
	{
		const short Header = 0x162;		//Size in Packet: 4 bytes
	}


	Handler: 0x007F5840


Packet 0x0163
	TemplateSize: 2

	Template: 0x00000163 0x00000104 

	DecodedTemplate: 
	struct Packet_0x163
	{
		const short Header = 0x163;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x007F5860


Packet 0x0164
	TemplateSize: 2

	Template: 0x00000164 0x00000104 

	DecodedTemplate: 
	struct Packet_0x164
	{
		const short Header = 0x164;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x007FB400


Packet 0x0165
	TemplateSize: 1

	Template: 0x00000165 

	DecodedTemplate: 
	struct Packet_0x165
	{
		const short Header = 0x165;		//Size in Packet: 4 bytes
	}


	Handler: 0x007FB480


Packet 0x0166
	TemplateSize: 1

	Template: 0x00000166 

	DecodedTemplate: 
	struct Packet_0x166
	{
		const short Header = 0x166;		//Size in Packet: 4 bytes
	}


	Handler: 0x007FB4A0


Packet 0x0167
	TemplateSize: 24

	Template: 0x00000167 0x00000404 0x00000104 0x00000404 
		0x00000404 0x00000404 0x00000404 0x00000404 0x00000404 
		0x00000104 0x00000104 0x00000104 0x00000104 
		0x00000104 0x00000204 0x00000204 0x00000204 
		0x00000204 0x00000204 0x00000404 0x00000104 
		0x00000104 0x00000404 0x00000104 

	DecodedTemplate: 
	struct Packet_0x167
	{
		const short Header = 0x167;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x007FB4C0


Packet 0x0168
	TemplateSize: 2

	Template: 0x00000168 0x00000404 

	DecodedTemplate: 
	struct Packet_0x168
	{
		const short Header = 0x168;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007FB5A0


Packet 0x0169
	TemplateSize: 2

	Template: 0x00000169 0x00000404 

	DecodedTemplate: 
	struct Packet_0x169
	{
		const short Header = 0x169;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007FB5C0


Packet 0x016A
	TemplateSize: 24

	Template: 0x0000016A 0x00000404 0x00000104 0x00000404 
		0x00000404 0x00000404 0x00000404 0x00000404 0x00000404 
		0x00000104 0x00000104 0x00000104 0x00000104 
		0x00000104 0x00000204 0x00000204 0x00000204 
		0x00000204 0x00000204 0x00000404 0x00000104 
		0x00000104 0x00000404 0x00000104 

	DecodedTemplate: 
	struct Packet_0x16a
	{
		const short Header = 0x16a;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x007FB5E0


Packet 0x016B
	TemplateSize: 5

	Template: 0x0000016B 0x00000404 0x00000204 0x00000104 
		0x00004017 

	DecodedTemplate: 
	struct Packet_0x16b
	{
		const short Header = 0x16b;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 64		//Size in Packet: 4 bytes
		wchar_t[64]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x007FB6C0


Packet 0x016C
	TemplateSize: 3

	Template: 0x0000016C 0x00000404 0x00000204 

	DecodedTemplate: 
	struct Packet_0x16c
	{
		const short Header = 0x16c;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007FB6F0


Packet 0x016D
	TemplateSize: 5

	Template: 0x0000016D 0x00000404 0x00000204 0x00000104 
		0x00004017 

	DecodedTemplate: 
	struct Packet_0x16d
	{
		const short Header = 0x16d;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 64		//Size in Packet: 4 bytes
		wchar_t[64]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x007FB720


Packet 0x016E
	TemplateSize: 21

	Template: 0x0000016E 0x00000204 0x00004017 0x00000617 
		0x00000204 0x00000104 0x00000104 0x00000104 0x00000104 
		0x00000204 0x00000204 0x00000104 0x00000104 
		0x00000104 0x00000104 0x00000204 0x00000204 
		0x00000404 0x00000404 0x00000404 0x00000104 

	DecodedTemplate: 
	struct Packet_0x16e
	{
		const short Header = 0x16e;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 64		//Size in Packet: 4 bytes
		wchar_t[64]		//Size in Packet: 2 * string_length bytes
		//short string_length;	//MaxLength: 6		//Size in Packet: 4 bytes
		wchar_t[6]		//Size in Packet: 2 * string_length bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x007FB750


Packet 0x016F
	TemplateSize: 4

	Template: 0x0000016F 0x00000404 0x00000204 0x00000104 

	DecodedTemplate: 
	struct Packet_0x16f
	{
		const short Header = 0x16f;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x007FB860


Packet 0x0170
	TemplateSize: 2

	Template: 0x00000170 0x00000104 

	DecodedTemplate: 
	struct Packet_0x170
	{
		const short Header = 0x170;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x007FB890


Packet 0x0171
	TemplateSize: 1

	Template: 0x00000171 

	DecodedTemplate: 
	struct Packet_0x171
	{
		const short Header = 0x171;		//Size in Packet: 4 bytes
	}


	Handler: 0x007FB950


Packet 0x0172
	TemplateSize: 5

	Template: 0x00000172 0x00000104 0x00000104 0x00000104 
		0x00000104 

	DecodedTemplate: 
	struct Packet_0x172
	{
		const short Header = 0x172;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x007FB9D0


Packet 0x0173
	TemplateSize: 2

	Template: 0x00000173 0x00001417 

	DecodedTemplate: 
	struct Packet_0x173
	{
		const short Header = 0x173;		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 20		//Size in Packet: 4 bytes
		wchar_t[20]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x007FBA10


Packet 0x0174
	TemplateSize: 1

	Template: 0x00000174 

	DecodedTemplate: 
	struct Packet_0x174
	{
		const short Header = 0x174;		//Size in Packet: 4 bytes
	}


	Handler: 0x007FBA30


Packet 0x0175
	TemplateSize: 2

	Template: 0x00000175 0x00000404 

	DecodedTemplate: 
	struct Packet_0x175
	{
		const short Header = 0x175;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007FBA50


Packet 0x0176
	TemplateSize: 5

	Template: 0x00000176 0x00007A17 0x00000104 0x00000404 
		0x00000404 

	DecodedTemplate: 
	struct Packet_0x176
	{
		const short Header = 0x176;		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 122		//Size in Packet: 4 bytes
		wchar_t[122]		//Size in Packet: 2 * string_length bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007FBA70


Packet 0x0177
	TemplateSize: 2

	Template: 0x00000177 0x00000404 

	DecodedTemplate: 
	struct Packet_0x177
	{
		const short Header = 0x177;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007FBAB0


Packet 0x0178
	TemplateSize: 3

	Template: 0x00000178 0x00007A17 0x00000104 

	DecodedTemplate: 
	struct Packet_0x178
	{
		const short Header = 0x178;		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 122		//Size in Packet: 4 bytes
		wchar_t[122]		//Size in Packet: 2 * string_length bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x007FBAD0


Packet 0x0179
	TemplateSize: 2

	Template: 0x00000179 0x00000404 

	DecodedTemplate: 
	struct Packet_0x179
	{
		const short Header = 0x179;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007FBB00


Packet 0x017A
	TemplateSize: 6

	Template: 0x0000017A 0x00001005 0x00001417 0x00000204 
		0x0004000B 0x00000006 

	DecodedTemplate: 
	struct Packet_0x17a
	{
		const short Header = 0x17a;		//Size in Packet: 4 bytes
		BYTE[16]		//Size in Packet: 16 bytes
		//short string_length;	//MaxLength: 20		//Size in Packet: 4 bytes
		wchar_t[20]		//Size in Packet: 2 * string_length bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		short length;	//MaxLength: 1024		//Size in Packet: 4 bytes
		BYTE[length]	//MaxLength: 1024		//Size in Packet: 1 * length bytes MaxSize in Packet: 1024bytes
	}


	Handler: 0x007FBB20


Packet 0x017B
	TemplateSize: 1

	Template: 0x0000017B 

	DecodedTemplate: 
	struct Packet_0x17b
	{
		const short Header = 0x17b;		//Size in Packet: 4 bytes
	}


	Handler: 0x007FBB70


Packet 0x017C
	TemplateSize: 1

	Template: 0x0000017C 

	DecodedTemplate: 
	struct Packet_0x17c
	{
		const short Header = 0x17c;		//Size in Packet: 4 bytes
	}


	Handler: 0x007FBBA0


Packet 0x017D
	TemplateSize: 2

	Template: 0x0000017D 0x00000404 

	DecodedTemplate: 
	struct Packet_0x17d
	{
		const short Header = 0x17d;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007FBBC0


Packet 0x017E
	TemplateSize: 2

	Template: 0x0000017E 0x00000104 

	DecodedTemplate: 
	struct Packet_0x17e
	{
		const short Header = 0x17e;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x007FBBF0


Packet 0x017F
	TemplateSize: 2

	Template: 0x0000017F 0x00000204 

	DecodedTemplate: 
	struct Packet_0x17f
	{
		const short Header = 0x17f;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
	}


	Handler: 0x005B39D0


Packet 0x0180
	TemplateSize: 1

	Template: 0x00000180 

	DecodedTemplate: 
	struct Packet_0x180
	{
		const short Header = 0x180;		//Size in Packet: 4 bytes
	}


	Handler: 0x007FBC20


Packet 0x0181
	TemplateSize: 4

	Template: 0x00000181 0x00000204 0x00000204 0x00000404 

	DecodedTemplate: 
	struct Packet_0x181
	{
		const short Header = 0x181;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007FBC60


Packet 0x0182
	TemplateSize: 3

	Template: 0x00000182 0x00000104 0x00000404 

	DecodedTemplate: 
	struct Packet_0x182
	{
		const short Header = 0x182;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007FBCA0


Packet 0x0183
	TemplateSize: 2

	Template: 0x00000183 0x00000204 

	DecodedTemplate: 
	struct Packet_0x183
	{
		const short Header = 0x183;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007FBCC0


Packet 0x0184
	TemplateSize: 9

	Template: 0x00000184 0x00000204 0x00000104 0x00000104 
		0x00000104 0x00000404 0x00004017 0x0000080C 0x00001417 

	DecodedTemplate: 
	struct Packet_0x184
	{
		const short Header = 0x184;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 64		//Size in Packet: 4 bytes
		wchar_t[64]		//Size in Packet: 2 * string_length bytes
		BYTE ArraySize;	//MaxSize: 8		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 20		//Size in Packet: 4 bytes
		wchar_t[20]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x007FBD40


Packet 0x0185
	TemplateSize: 3

	Template: 0x00000185 0x00000204 0x00000104 

	DecodedTemplate: 
	struct Packet_0x185
	{
		const short Header = 0x185;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x007FBDD0


Packet 0x0186
	TemplateSize: 2

	Template: 0x00000186 0x00000104 

	DecodedTemplate: 
	struct Packet_0x186
	{
		const short Header = 0x186;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x007FBE00


Packet 0x0187
	TemplateSize: 6

	Template: 0x00000187 0x00000404 0x00000012 0x00000204 
		0x00000104 0x00000104 

	DecodedTemplate: 
	struct Packet_0x187
	{
		const short Header = 0x187;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		float		//Size in Packet: 4 bytes
		float		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x007FBE40


Packet 0x0188
	TemplateSize: 3

	Template: 0x00000188 0x0004000B 0x00000006 

	DecodedTemplate: 
	struct Packet_0x188
	{
		const short Header = 0x188;		//Size in Packet: 4 bytes
		short length;	//MaxLength: 1024		//Size in Packet: 4 bytes
		BYTE[length]	//MaxLength: 1024		//Size in Packet: 1 * length bytes MaxSize in Packet: 1024bytes
	}


	Handler: 0x007FBEB0


Packet 0x0189
	TemplateSize: 4

	Template: 0x00000189 0x00000104 0x00000204 0x00000404 

	DecodedTemplate: 
	struct Packet_0x189
	{
		const short Header = 0x189;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007FBED0


Packet 0x018A
	TemplateSize: 2

	Template: 0x0000018A 0x00000104 

	DecodedTemplate: 
	struct Packet_0x18a
	{
		const short Header = 0x18a;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x007FBF00


Packet 0x018B
	TemplateSize: 7

	Template: 0x0000018B 0x00000050 0x00000204 0x00000104 
		0x00000404 0x00000104 0x00000104 

	DecodedTemplate: 
	struct Packet_0x18b
	{
		const short Header = 0x18b;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x007FBF20


Packet 0x018C
	TemplateSize: 2

	Template: 0x0000018C 0x00000204 

	DecodedTemplate: 
	struct Packet_0x18c
	{
		const short Header = 0x18c;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007FBFA0


Packet 0x018D
	TemplateSize: 2

	Template: 0x0000018D 0x00007A17 

	DecodedTemplate: 
	struct Packet_0x18d
	{
		const short Header = 0x18d;		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 122		//Size in Packet: 4 bytes
		wchar_t[122]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x00802240


Packet 0x018E
	TemplateSize: 18

	Template: 0x0000018E 0x00000404 0x00000204 0x00000204 
		0x00000104 0x00000104 0x00000104 0x0000020C 0x00000104 
		0x00000104 0x00000104 0x00000104 0x00000104 
		0x00000104 0x00000104 0x00000204 0x00000104 
		0x00003017 

	DecodedTemplate: 
	struct Packet_0x18e
	{
		const short Header = 0x18e;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE ArraySize;	//MaxSize: 2		//Size in Packet: 4 bytes
		BYTE[ArraySize]	//Mask: 0x000000ff		//Size in Packet: 4 bytes / element
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 48		//Size in Packet: 4 bytes
		wchar_t[48]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x007FBFB0


Packet 0x018F
	TemplateSize: 1

	Template: 0x0000018F 

	DecodedTemplate: 
	struct Packet_0x18f
	{
		const short Header = 0x18f;		//Size in Packet: 4 bytes
	}


	Handler: 0x007FBFD0


Packet 0x0190
	TemplateSize: 4

	Template: 0x00000190 0x0000100C 0x00000204 0x00000404 

	DecodedTemplate: 
	struct Packet_0x190
	{
		const short Header = 0x190;		//Size in Packet: 4 bytes
		BYTE ArraySize;	//MaxSize: 16		//Size in Packet: 4 bytes
		WORD[ArraySize]	//Mask: 0x0000ffff		//Size in Packet: 4 bytes / element
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007FC000


Packet 0x0191
	TemplateSize: 9

	Template: 0x00000191 0x00000104 0x00007A17 0x00007A17 
		0x00000104 0x00000404 0x00000404 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0x191
	{
		const short Header = 0x191;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 122		//Size in Packet: 4 bytes
		wchar_t[122]		//Size in Packet: 2 * string_length bytes
		//short string_length;	//MaxLength: 122		//Size in Packet: 4 bytes
		wchar_t[122]		//Size in Packet: 2 * string_length bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007FC020


Packet 0x0192
	TemplateSize: 2

	Template: 0x00000192 0x00000104 

	DecodedTemplate: 
	struct Packet_0x192
	{
		const short Header = 0x192;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x007FC0A0


Packet 0x0193
	TemplateSize: 7

	Template: 0x00000193 0x00000104 0x00000104 0x00000404 
		0x00000404 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0x193
	{
		const short Header = 0x193;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007FC0D0


Packet 0x0194
	TemplateSize: 4

	Template: 0x00000194 0x00000104 0x00007A17 0x00007A17 

	DecodedTemplate: 
	struct Packet_0x194
	{
		const short Header = 0x194;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 122		//Size in Packet: 4 bytes
		wchar_t[122]		//Size in Packet: 2 * string_length bytes
		//short string_length;	//MaxLength: 122		//Size in Packet: 4 bytes
		wchar_t[122]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x007FC140


Packet 0x0195
	TemplateSize: 13

	Template: 0x00000195 0x00000050 0x00000204 0x00000104 
		0x00000404 0x00000104 0x00000104 0x00000404 0x00000012 
		0x00000204 0x00000104 0x00000104 0x00001417 

	DecodedTemplate: 
	struct Packet_0x195
	{
		const short Header = 0x195;		//Size in Packet: 4 bytes
		ID		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		float		//Size in Packet: 4 bytes
		float		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 20		//Size in Packet: 4 bytes
		wchar_t[20]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x007FC1B0


Packet 0x0196
	TemplateSize: 7

	Template: 0x00000196 0x00001805 0x00000404 0x00000104 
		0x00000204 0x00000104 0x00000404 

	DecodedTemplate: 
	struct Packet_0x196
	{
		const short Header = 0x196;		//Size in Packet: 4 bytes
		BYTE[24]		//Size in Packet: 24 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007FC290


Packet 0x0197
	TemplateSize: 10

	Template: 0x00000197 0x00000104 0x00000104 0x00000404 
		0x00007A17 0x00000404 0x00007A17 0x00000404 0x00000104 
		0x00000104 

	DecodedTemplate: 
	struct Packet_0x197
	{
		const short Header = 0x197;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 122		//Size in Packet: 4 bytes
		wchar_t[122]		//Size in Packet: 2 * string_length bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 122		//Size in Packet: 4 bytes
		wchar_t[122]		//Size in Packet: 2 * string_length bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x007FC360


Packet 0x0198
	TemplateSize: 2

	Template: 0x00000198 0x00000104 

	DecodedTemplate: 
	struct Packet_0x198
	{
		const short Header = 0x198;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x007FC3F0


Packet 0x0199
	TemplateSize: 3

	Template: 0x00000199 0x00000104 0x00000404 

	DecodedTemplate: 
	struct Packet_0x199
	{
		const short Header = 0x199;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007FC430


Packet 0x019A
	TemplateSize: 3

	Template: 0x0000019A 0x00000104 0x00000404 

	DecodedTemplate: 
	struct Packet_0x19a
	{
		const short Header = 0x19a;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007FC460


Packet 0x019B
	TemplateSize: 2

	Template: 0x0000019B 0x00000104 

	DecodedTemplate: 
	struct Packet_0x19b
	{
		const short Header = 0x19b;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x007FC490


Packet 0x019C
	TemplateSize: 2

	Template: 0x0000019C 0x00000404 

	DecodedTemplate: 
	struct Packet_0x19c
	{
		const short Header = 0x19c;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007FC500


Packet 0x019D
	TemplateSize: 5

	Template: 0x0000019D 0x00000204 0x00000404 0x00000404 
		0x00001417 

	DecodedTemplate: 
	struct Packet_0x19d
	{
		const short Header = 0x19d;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 20		//Size in Packet: 4 bytes
		wchar_t[20]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x007FC560


Packet 0x019E
	TemplateSize: 7

	Template: 0x0000019E 0x00000204 0x00000404 0x00000104 
		0x00000104 0x00000104 0x00001417 

	DecodedTemplate: 
	struct Packet_0x19e
	{
		const short Header = 0x19e;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 20		//Size in Packet: 4 bytes
		wchar_t[20]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x007FC520


Packet 0x019F
	TemplateSize: 13

	Template: 0x0000019F 0x00000204 0x00000104 0x00000104 
		0x00000104 0x00000104 0x00000104 0x00000204 0x00000104 
		0x00000404 0x00000404 0x00002017 0x00000617 

	DecodedTemplate: 
	struct Packet_0x19f
	{
		const short Header = 0x19f;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 32		//Size in Packet: 4 bytes
		wchar_t[32]		//Size in Packet: 2 * string_length bytes
		//short string_length;	//MaxLength: 6		//Size in Packet: 4 bytes
		wchar_t[6]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x007FC590


Packet 0x01A0
	TemplateSize: 2

	Template: 0x000001A0 0x00007A17 

	DecodedTemplate: 
	struct Packet_0x1a0
	{
		const short Header = 0x1a0;		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 122		//Size in Packet: 4 bytes
		wchar_t[122]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x007FC600


Packet 0x01A1
	TemplateSize: 2

	Template: 0x000001A1 0x00000404 

	DecodedTemplate: 
	struct Packet_0x1a1
	{
		const short Header = 0x1a1;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007FC730


Packet 0x01A2
	TemplateSize: 4

	Template: 0x000001A2 0x00000204 0x00000104 0x00000404 

	DecodedTemplate: 
	struct Packet_0x1a2
	{
		const short Header = 0x1a2;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x007FC760


Packet 0x01A3
	TemplateSize: 3

	Template: 0x000001A3 0x00000204 0x00000104 

	DecodedTemplate: 
	struct Packet_0x1a3
	{
		const short Header = 0x1a3;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x00801CE0


Packet 0x01A4
	TemplateSize: 7

	Template: 0x000001A4 0x00000104 0x00000104 0x00002017 
		0x00000404 0x00000104 0x00000404 

	DecodedTemplate: 
	struct Packet_0x1a4
	{
		const short Header = 0x1a4;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 32		//Size in Packet: 4 bytes
		wchar_t[32]		//Size in Packet: 2 * string_length bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00801D10


Packet 0x01A5
	TemplateSize: 1

	Template: 0x000001A5 

	DecodedTemplate: 
	struct Packet_0x1a5
	{
		const short Header = 0x1a5;		//Size in Packet: 4 bytes
	}


	Handler: 0x00801D50


Packet 0x01A6
	TemplateSize: 7

	Template: 0x000001A6 0x00000104 0x00000104 0x00002017 
		0x00000404 0x00000104 0x00000404 

	DecodedTemplate: 
	struct Packet_0x1a6
	{
		const short Header = 0x1a6;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 32		//Size in Packet: 4 bytes
		wchar_t[32]		//Size in Packet: 2 * string_length bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00801D70


Packet 0x01A7
	TemplateSize: 1

	Template: 0x000001A7 

	DecodedTemplate: 
	struct Packet_0x1a7
	{
		const short Header = 0x1a7;		//Size in Packet: 4 bytes
	}


	Handler: 0x00801DB0


Packet 0x01A8
	TemplateSize: 2

	Template: 0x000001A8 0x00000104 

	DecodedTemplate: 
	struct Packet_0x1a8
	{
		const short Header = 0x1a8;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x00801DD0


Packet 0x01A9
	TemplateSize: 2

	Template: 0x000001A9 0x00000104 

	DecodedTemplate: 
	struct Packet_0x1a9
	{
		const short Header = 0x1a9;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x00801DF0


Packet 0x01AA
	TemplateSize: 1

	Template: 0x000001AA 

	DecodedTemplate: 
	struct Packet_0x1aa
	{
		const short Header = 0x1aa;		//Size in Packet: 4 bytes
	}


	Handler: 0x00801E10


Packet 0x01AB
	TemplateSize: 1

	Template: 0x000001AB 

	DecodedTemplate: 
	struct Packet_0x1ab
	{
		const short Header = 0x1ab;		//Size in Packet: 4 bytes
	}


	Handler: 0x00801E30


Packet 0x01AC
	TemplateSize: 4

	Template: 0x000001AC 0x00000204 0x00000104 0x00007A17 

	DecodedTemplate: 
	struct Packet_0x1ac
	{
		const short Header = 0x1ac;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 122		//Size in Packet: 4 bytes
		wchar_t[122]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x00801E50


Packet 0x01AD
	TemplateSize: 2

	Template: 0x000001AD 0x00000104 

	DecodedTemplate: 
	struct Packet_0x1ad
	{
		const short Header = 0x1ad;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x00801E80


Packet 0x01AE
	TemplateSize: 2

	Template: 0x000001AE 0x00000404 

	DecodedTemplate: 
	struct Packet_0x1ae
	{
		const short Header = 0x1ae;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00801EA0


Packet 0x01AF
	TemplateSize: 2

	Template: 0x000001AF 0x00000104 

	DecodedTemplate: 
	struct Packet_0x1af
	{
		const short Header = 0x1af;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x00801EC0


Packet 0x01B0
	TemplateSize: 6

	Template: 0x000001B0 0x00000204 0x00000204 0x00001417 
		0x00000104 0x00000104 

	DecodedTemplate: 
	struct Packet_0x1b0
	{
		const short Header = 0x1b0;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 20		//Size in Packet: 4 bytes
		wchar_t[20]		//Size in Packet: 2 * string_length bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x00801EE0


Packet 0x01B1
	TemplateSize: 3

	Template: 0x000001B1 0x00000204 0x00000204 

	DecodedTemplate: 
	struct Packet_0x1b1
	{
		const short Header = 0x1b1;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00801F10


Packet 0x01B2
	TemplateSize: 2

	Template: 0x000001B2 0x00000204 

	DecodedTemplate: 
	struct Packet_0x1b2
	{
		const short Header = 0x1b2;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00801F40


Packet 0x01B3
	TemplateSize: 6

	Template: 0x000001B3 0x00000204 0x00000204 0x00000204 
		0x00000104 0x00000104 

	DecodedTemplate: 
	struct Packet_0x1b3
	{
		const short Header = 0x1b3;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x00801F60


Packet 0x01B4
	TemplateSize: 4

	Template: 0x000001B4 0x00000204 0x00000204 0x00000204 

	DecodedTemplate: 
	struct Packet_0x1b4
	{
		const short Header = 0x1b4;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00801FA0


Packet 0x01B5
	TemplateSize: 2

	Template: 0x000001B5 0x00000204 

	DecodedTemplate: 
	struct Packet_0x1b5
	{
		const short Header = 0x1b5;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00801FF0


Packet 0x01B6
	TemplateSize: 2

	Template: 0x000001B6 0x00000204 

	DecodedTemplate: 
	struct Packet_0x1b6
	{
		const short Header = 0x1b6;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00801FD0


Packet 0x01B7
	TemplateSize: 2

	Template: 0x000001B7 0x00000204 

	DecodedTemplate: 
	struct Packet_0x1b7
	{
		const short Header = 0x1b7;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00802030


Packet 0x01B8
	TemplateSize: 2

	Template: 0x000001B8 0x00000204 

	DecodedTemplate: 
	struct Packet_0x1b8
	{
		const short Header = 0x1b8;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00802010


Packet 0x01B9
	TemplateSize: 2

	Template: 0x000001B9 0x00000204 

	DecodedTemplate: 
	struct Packet_0x1b9
	{
		const short Header = 0x1b9;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00802070


Packet 0x01BA
	TemplateSize: 2

	Template: 0x000001BA 0x00000204 

	DecodedTemplate: 
	struct Packet_0x1ba
	{
		const short Header = 0x1ba;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00802050


Packet 0x01BB
	TemplateSize: 2

	Template: 0x000001BB 0x00000104 

	DecodedTemplate: 
	struct Packet_0x1bb
	{
		const short Header = 0x1bb;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x00802090


Packet 0x01BC
	TemplateSize: 4

	Template: 0x000001BC 0x00000204 0x00000204 0x00000104 

	DecodedTemplate: 
	struct Packet_0x1bc
	{
		const short Header = 0x1bc;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x008020B0


Packet 0x01BD
	TemplateSize: 3

	Template: 0x000001BD 0x00000204 0x00000204 

	DecodedTemplate: 
	struct Packet_0x1bd
	{
		const short Header = 0x1bd;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
	}


	Handler: 0x008020E0


Packet 0x01BE
	TemplateSize: 3

	Template: 0x000001BE 0x00000204 0x00000204 

	DecodedTemplate: 
	struct Packet_0x1be
	{
		const short Header = 0x1be;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00802110


Packet 0x01BF
	TemplateSize: 3

	Template: 0x000001BF 0x00000204 0x00000204 

	DecodedTemplate: 
	struct Packet_0x1bf
	{
		const short Header = 0x1bf;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00802140


Packet 0x01C0
	TemplateSize: 3

	Template: 0x000001C0 0x00000204 0x00000204 

	DecodedTemplate: 
	struct Packet_0x1c0
	{
		const short Header = 0x1c0;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00802170


Packet 0x01C1
	TemplateSize: 3

	Template: 0x000001C1 0x00000204 0x00000204 

	DecodedTemplate: 
	struct Packet_0x1c1
	{
		const short Header = 0x1c1;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
	}


	Handler: 0x008021A0


Packet 0x01C2
	TemplateSize: 4

	Template: 0x000001C2 0x00000204 0x00000204 0x00000104 

	DecodedTemplate: 
	struct Packet_0x1c2
	{
		const short Header = 0x1c2;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x008021D0


Packet 0x01C3
	TemplateSize: 2

	Template: 0x000001C3 0x00000204 

	DecodedTemplate: 
	struct Packet_0x1c3
	{
		const short Header = 0x1c3;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00802200


Packet 0x01C4
	TemplateSize: 2

	Template: 0x000001C4 0x00000204 

	DecodedTemplate: 
	struct Packet_0x1c4
	{
		const short Header = 0x1c4;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00802220


Packet 0x01C5
	TemplateSize: 2

	Template: 0x000001C5 0x00007A17 

	DecodedTemplate: 
	struct Packet_0x1c5
	{
		const short Header = 0x1c5;		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 122		//Size in Packet: 4 bytes
		wchar_t[122]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x00802240


Packet 0x01C6
	TemplateSize: 1

	Template: 0x000001C6 

	DecodedTemplate: 
	struct Packet_0x1c6
	{
		const short Header = 0x1c6;		//Size in Packet: 4 bytes
	}


	Handler: 0x00802270


Packet 0x01C7
	TemplateSize: 2

	Template: 0x000001C7 0x00000104 

	DecodedTemplate: 
	struct Packet_0x1c7
	{
		const short Header = 0x1c7;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x00802290


Packet 0x01C8
	TemplateSize: 7

	Template: 0x000001C8 0x0000101B 0x00000006 0x0000100C 
		0x00000404 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0x1c8
	{
		const short Header = 0x1c8;		//Size in Packet: 4 bytes
		short length;	//MaxLength: 16		//Size in Packet: 4 bytes
		WORD[length]	//MaxLength: 16		//Size in Packet: 2 * length bytes MaxSize in Packet: 32bytes
		BYTE ArraySize;	//MaxSize: 16		//Size in Packet: 4 bytes
		DWORD[ArraySize]	//Mask: 0xffffffff		//Size in Packet: 4 bytes / element
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x008022B0


Packet 0x01C9
	TemplateSize: 1

	Template: 0x000001C9 

	DecodedTemplate: 
	struct Packet_0x1c9
	{
		const short Header = 0x1c9;		//Size in Packet: 4 bytes
	}


	Handler: 0x00802440


Packet 0x01CA
	TemplateSize: 4

	Template: 0x000001CA 0x00000104 0x00000104 0x00007A17 

	DecodedTemplate: 
	struct Packet_0x1ca
	{
		const short Header = 0x1ca;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 122		//Size in Packet: 4 bytes
		wchar_t[122]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x00802460


Packet 0x01CB
	TemplateSize: 3

	Template: 0x000001CB 0x00000204 0x00000104 

	DecodedTemplate: 
	struct Packet_0x1cb
	{
		const short Header = 0x1cb;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x008024A0


Packet 0x01CC
	TemplateSize: 3

	Template: 0x000001CC 0x00000204 0x00000204 

	DecodedTemplate: 
	struct Packet_0x1cc
	{
		const short Header = 0x1cc;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00802520


Packet 0x01CD
	TemplateSize: 3

	Template: 0x000001CD 0x00000204 0x00000204 

	DecodedTemplate: 
	struct Packet_0x1cd
	{
		const short Header = 0x1cd;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00802550


Packet 0x01CE
	TemplateSize: 14

	Template: 0x000001CE 0x00000204 0x00000204 0x00000104 
		0x00000104 0x00000104 0x00000104 0x00000104 0x00002017 
		0x00001417 0x00000104 0x00000104 0x00000104 
		0x00000404 

	DecodedTemplate: 
	struct Packet_0x1ce
	{
		const short Header = 0x1ce;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 32		//Size in Packet: 4 bytes
		wchar_t[32]		//Size in Packet: 2 * string_length bytes
		//short string_length;	//MaxLength: 20		//Size in Packet: 4 bytes
		wchar_t[20]		//Size in Packet: 2 * string_length bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00802580


Packet 0x01CF
	TemplateSize: 2

	Template: 0x000001CF 0x00000204 

	DecodedTemplate: 
	struct Packet_0x1cf
	{
		const short Header = 0x1cf;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
	}


	Handler: 0x008025F0


Packet 0x01D0
	TemplateSize: 2

	Template: 0x000001D0 0x00000204 

	DecodedTemplate: 
	struct Packet_0x1d0
	{
		const short Header = 0x1d0;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00802620


Packet 0x01D1
	TemplateSize: 4

	Template: 0x000001D1 0x00000204 0x00000104 0x00000104 

	DecodedTemplate: 
	struct Packet_0x1d1
	{
		const short Header = 0x1d1;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x00802650


Packet 0x01D2
	TemplateSize: 4

	Template: 0x000001D2 0x00000204 0x00000104 0x00000104 

	DecodedTemplate: 
	struct Packet_0x1d2
	{
		const short Header = 0x1d2;		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x00802680


Packet 0x01D3
	TemplateSize: 2

	Template: 0x000001D3 0x00000104 

	DecodedTemplate: 
	struct Packet_0x1d3
	{
		const short Header = 0x1d3;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x008026B0


Packet 0x01D4
	TemplateSize: 2

	Template: 0x000001D4 0x00007A17 

	DecodedTemplate: 
	struct Packet_0x1d4
	{
		const short Header = 0x1d4;		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 122		//Size in Packet: 4 bytes
		wchar_t[122]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x008026D0


Packet 0x01D5
	TemplateSize: 2

	Template: 0x000001D5 0x00000104 

	DecodedTemplate: 
	struct Packet_0x1d5
	{
		const short Header = 0x1d5;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x008026F0


Packet 0x01D6
	TemplateSize: 2

	Template: 0x000001D6 0x00000104 

	DecodedTemplate: 
	struct Packet_0x1d6
	{
		const short Header = 0x1d6;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x00802710


Packet 0x01D7
	TemplateSize: 2

	Template: 0x000001D7 0x00000404 

	DecodedTemplate: 
	struct Packet_0x1d7
	{
		const short Header = 0x1d7;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00808100


Packet 0x01D8
	TemplateSize: 2

	Template: 0x000001D8 0x00000104 

	DecodedTemplate: 
	struct Packet_0x1d8
	{
		const short Header = 0x1d8;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x00808000


Packet 0x01D9
	TemplateSize: 3

	Template: 0x000001D9 0x00000104 0x00000404 

	DecodedTemplate: 
	struct Packet_0x1d9
	{
		const short Header = 0x1d9;		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00808120


Packet 0x01DA
	TemplateSize: 2

	Template: 0x000001DA 0x00000404 

	DecodedTemplate: 
	struct Packet_0x1da
	{
		const short Header = 0x1da;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00808040


Packet 0x01DB
	TemplateSize: 3

	Template: 0x000001DB 0x00000404 0x00000104 

	DecodedTemplate: 
	struct Packet_0x1db
	{
		const short Header = 0x1db;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x00808060


Packet 0x01DC
	TemplateSize: 2

	Template: 0x000001DC 0x00000404 

	DecodedTemplate: 
	struct Packet_0x1dc
	{
		const short Header = 0x1dc;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x00808080


Packet 0x01DD
	TemplateSize: 1

	Template: 0x000001DD 

	DecodedTemplate: 
	struct Packet_0x1dd
	{
		const short Header = 0x1dd;		//Size in Packet: 4 bytes
	}


	Handler: 0x008080A0


Packet 0x01DE
	TemplateSize: 1

	Template: 0x000001DE 

	DecodedTemplate: 
	struct Packet_0x1de
	{
		const short Header = 0x1de;		//Size in Packet: 4 bytes
	}


	Handler: 0x008080C0


Packet 0x01DF
	TemplateSize: 1

	Template: 0x000001DF 

	DecodedTemplate: 
	struct Packet_0x1df
	{
		const short Header = 0x1df;		//Size in Packet: 4 bytes
	}


	Handler: 0x008080E0


Packet 0x01E0
	TemplateSize: 1

	Template: 0x000001E0 

	DecodedTemplate: 
	struct Packet_0x1e0
	{
		const short Header = 0x1e0;		//Size in Packet: 4 bytes
	}


	Handler: 0x00808020


Packet 0x01E1
	TemplateSize: 3

	Template: 0x000001E1 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0x1e1
	{
		const short Header = 0x1e1;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x0040CB90


