Table has 39 entries

Packet 0x0000
	TemplateSize: 2

	Template: 0x00000000 0x00000404 

	DecodedTemplate: 
	struct Packet_0x0
	{
		const short Header = 0x0;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x005A8E10


Packet 0x0001
	TemplateSize: 4

	Template: 0x00000001 0x00000404 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0x1
	{
		const short Header = 0x1;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x0040AD00


Packet 0x0002
	TemplateSize: 3

	Template: 0x00000002 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0x2
	{
		const short Header = 0x2;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x0040B520


Packet 0x0003
	TemplateSize: 3

	Template: 0x00000003 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0x3
	{
		const short Header = 0x3;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x0040CB90


Packet 0x0004
	TemplateSize: 3

	Template: 0x00000004 0x00000404 0x00080017 

	DecodedTemplate: 
	struct Packet_0x4
	{
		const short Header = 0x4;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 2048		//Size in Packet: 4 bytes
		wchar_t[2048]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x0040AEB0


Packet 0x0005
	TemplateSize: 9

	Template: 0x00000005 0x00000404 0x00001C17 0x00001C17 
		0x00002017 0x00002017 0x00000C17 0x00001C17 0x00001C17 

	DecodedTemplate: 
	struct Packet_0x5
	{
		const short Header = 0x5;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 28		//Size in Packet: 4 bytes
		wchar_t[28]		//Size in Packet: 2 * string_length bytes
		//short string_length;	//MaxLength: 28		//Size in Packet: 4 bytes
		wchar_t[28]		//Size in Packet: 2 * string_length bytes
		//short string_length;	//MaxLength: 32		//Size in Packet: 4 bytes
		wchar_t[32]		//Size in Packet: 2 * string_length bytes
		//short string_length;	//MaxLength: 32		//Size in Packet: 4 bytes
		wchar_t[32]		//Size in Packet: 2 * string_length bytes
		//short string_length;	//MaxLength: 12		//Size in Packet: 4 bytes
		wchar_t[12]		//Size in Packet: 2 * string_length bytes
		//short string_length;	//MaxLength: 28		//Size in Packet: 4 bytes
		wchar_t[28]		//Size in Packet: 2 * string_length bytes
		//short string_length;	//MaxLength: 28		//Size in Packet: 4 bytes
		wchar_t[28]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x0040B110


Packet 0x0006
	TemplateSize: 7

	Template: 0x00000006 0x00000404 0x00000805 0x00000805 
		0x00000805 0x00000805 0x00000404 

	DecodedTemplate: 
	struct Packet_0x6
	{
		const short Header = 0x6;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE[8]		//Size in Packet: 8 bytes
		BYTE[8]		//Size in Packet: 8 bytes
		BYTE[8]		//Size in Packet: 8 bytes
		BYTE[8]		//Size in Packet: 8 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x0040B320


Packet 0x0007
	TemplateSize: 7

	Template: 0x00000007 0x00000404 0x00001005 0x00000404 
		0x00001417 0x0000400B 0x00000006 

	DecodedTemplate: 
	struct Packet_0x7
	{
		const short Header = 0x7;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE[16]		//Size in Packet: 16 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 20		//Size in Packet: 4 bytes
		wchar_t[20]		//Size in Packet: 2 * string_length bytes
		short length;	//MaxLength: 64		//Size in Packet: 4 bytes
		BYTE[length]	//MaxLength: 64		//Size in Packet: 1 * length bytes MaxSize in Packet: 64bytes
	}


	Handler: 0x0040B1A0


Packet 0x0008
	TemplateSize: 5

	Template: 0x00000008 0x00000404 0x00000404 0x00001805 
		0x00000404 

	DecodedTemplate: 
	struct Packet_0x8
	{
		const short Header = 0x8;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE[24]		//Size in Packet: 24 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x0040AE70


Packet 0x0009
	TemplateSize: 6

	Template: 0x00000009 0x00000404 0x00000404 0x00000404 
		0x00001805 0x00000404 

	DecodedTemplate: 
	struct Packet_0x9
	{
		const short Header = 0x9;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE[24]		//Size in Packet: 24 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x0040B1F0


Packet 0x000A
	TemplateSize: 4

	Template: 0x0000000A 0x00000404 0x00000404 0x00001417 

	DecodedTemplate: 
	struct Packet_0xa
	{
		const short Header = 0xa;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 20		//Size in Packet: 4 bytes
		wchar_t[20]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x0040B210


Packet 0x000B
	TemplateSize: 4

	Template: 0x0000000B 0x00000404 0x00001417 0x00001417 

	DecodedTemplate: 
	struct Packet_0xb
	{
		const short Header = 0xb;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 20		//Size in Packet: 4 bytes
		wchar_t[20]		//Size in Packet: 2 * string_length bytes
		//short string_length;	//MaxLength: 20		//Size in Packet: 4 bytes
		wchar_t[20]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x0040B230


Packet 0x000C
	TemplateSize: 4

	Template: 0x0000000C 0x00000404 0x00001417 0x00010017 

	DecodedTemplate: 
	struct Packet_0xc
	{
		const short Header = 0xc;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 20		//Size in Packet: 4 bytes
		wchar_t[20]		//Size in Packet: 2 * string_length bytes
		//short string_length;	//MaxLength: 256		//Size in Packet: 4 bytes
		wchar_t[256]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x0040B290


Packet 0x000D
	TemplateSize: 5

	Template: 0x0000000D 0x00000404 0x00000404 0x00010017 
		0x00010017 

	DecodedTemplate: 
	struct Packet_0xd
	{
		const short Header = 0xd;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 256		//Size in Packet: 4 bytes
		wchar_t[256]		//Size in Packet: 2 * string_length bytes
		//short string_length;	//MaxLength: 256		//Size in Packet: 4 bytes
		wchar_t[256]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x0040CBB0


Packet 0x000E
	TemplateSize: 5

	Template: 0x0000000E 0x00000404 0x00000404 0x0000200B 
		0x00000006 

	DecodedTemplate: 
	struct Packet_0xe
	{
		const short Header = 0xe;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		short length;	//MaxLength: 32		//Size in Packet: 4 bytes
		BYTE[length]	//MaxLength: 32		//Size in Packet: 1 * length bytes MaxSize in Packet: 32bytes
	}


	Handler: 0x0040B150


Packet 0x000F
	TemplateSize: 0

	Template: 

	DecodedTemplate: 


	Handler: 0x00000000


Packet 0x0010
	TemplateSize: 7

	Template: 0x00000010 0x00000404 0x00000404 0x00001005 
		0x00001417 0x00001417 0x00010017 

	DecodedTemplate: 
	struct Packet_0x10
	{
		const short Header = 0x10;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE[16]		//Size in Packet: 16 bytes
		//short string_length;	//MaxLength: 20		//Size in Packet: 4 bytes
		wchar_t[20]		//Size in Packet: 2 * string_length bytes
		//short string_length;	//MaxLength: 20		//Size in Packet: 4 bytes
		wchar_t[20]		//Size in Packet: 2 * string_length bytes
		//short string_length;	//MaxLength: 256		//Size in Packet: 4 bytes
		wchar_t[256]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x0040B2B0


Packet 0x0011
	TemplateSize: 13

	Template: 0x00000011 0x00000404 0x00000404 0x00000404 
		0x00000805 0x00000805 0x00001005 0x00001005 0x00000404 
		0x0000C80B 0x00000006 0x00000104 0x00000404 

	DecodedTemplate: 
	struct Packet_0x11
	{
		const short Header = 0x11;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE[8]		//Size in Packet: 8 bytes
		BYTE[8]		//Size in Packet: 8 bytes
		BYTE[16]		//Size in Packet: 16 bytes
		BYTE[16]		//Size in Packet: 16 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		short length;	//MaxLength: 200		//Size in Packet: 4 bytes
		BYTE[length]	//MaxLength: 200		//Size in Packet: 1 * length bytes MaxSize in Packet: 200bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x0040AED0


Packet 0x0012
	TemplateSize: 7

	Template: 0x00000012 0x00000404 0x00000404 0x00001005 
		0x00001417 0x00001417 0x00010017 

	DecodedTemplate: 
	struct Packet_0x12
	{
		const short Header = 0x12;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE[16]		//Size in Packet: 16 bytes
		//short string_length;	//MaxLength: 20		//Size in Packet: 4 bytes
		wchar_t[20]		//Size in Packet: 2 * string_length bytes
		//short string_length;	//MaxLength: 20		//Size in Packet: 4 bytes
		wchar_t[20]		//Size in Packet: 2 * string_length bytes
		//short string_length;	//MaxLength: 256		//Size in Packet: 4 bytes
		wchar_t[256]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x0040B2F0


Packet 0x0013
	TemplateSize: 2

	Template: 0x00000013 0x00000404 

	DecodedTemplate: 
	struct Packet_0x13
	{
		const short Header = 0x13;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x0040B2E0


Packet 0x0014
	TemplateSize: 3

	Template: 0x00000014 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0x14
	{
		const short Header = 0x14;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x0040B0D0


Packet 0x0015
	TemplateSize: 7

	Template: 0x00000015 0x00000404 0x00000805 0x00000805 
		0x00000404 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0x15
	{
		const short Header = 0x15;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE[8]		//Size in Packet: 8 bytes
		BYTE[8]		//Size in Packet: 8 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x0040B540


Packet 0x0016
	TemplateSize: 4

	Template: 0x00000016 0x00000404 0x0004000B 0x00000006 

	DecodedTemplate: 
	struct Packet_0x16
	{
		const short Header = 0x16;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		short length;	//MaxLength: 1024		//Size in Packet: 4 bytes
		BYTE[length]	//MaxLength: 1024		//Size in Packet: 1 * length bytes MaxSize in Packet: 1024bytes
	}


	Handler: 0x0040B0F0


Packet 0x0017
	TemplateSize: 3

	Template: 0x00000017 0x0010000B 0x00000006 

	DecodedTemplate: 
	struct Packet_0x17
	{
		const short Header = 0x17;		//Size in Packet: 4 bytes
		short length;	//MaxLength: 4096		//Size in Packet: 4 bytes
		BYTE[length]	//MaxLength: 4096		//Size in Packet: 1 * length bytes MaxSize in Packet: 4096bytes
	}


	Handler: 0x0040B360


Packet 0x0018
	TemplateSize: 6

	Template: 0x00000018 0x00000404 0x00000805 0x00000805 
		0x0000C80B 0x00000006 

	DecodedTemplate: 
	struct Packet_0x18
	{
		const short Header = 0x18;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE[8]		//Size in Packet: 8 bytes
		BYTE[8]		//Size in Packet: 8 bytes
		short length;	//MaxLength: 200		//Size in Packet: 4 bytes
		BYTE[length]	//MaxLength: 200		//Size in Packet: 1 * length bytes MaxSize in Packet: 200bytes
	}


	Handler: 0x0040B170


Packet 0x0019
	TemplateSize: 0

	Template: 

	DecodedTemplate: 


	Handler: 0x00000000


Packet 0x001A
	TemplateSize: 5

	Template: 0x0000001A 0x00000404 0x00000B0C 0x00000104 
		0x00000104 

	DecodedTemplate: 
	struct Packet_0x1a
	{
		const short Header = 0x1a;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE ArraySize;	//MaxSize: 11		//Size in Packet: 4 bytes
		BYTE[ArraySize]	//Mask: 0x000000ff		//Size in Packet: 4 bytes / element
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
	}


	Handler: 0x0040B1D0


Packet 0x001B
	TemplateSize: 5

	Template: 0x0000001B 0x00000404 0x00000404 0x00000404 
		0x00000404 

	DecodedTemplate: 
	struct Packet_0x1b
	{
		const short Header = 0x1b;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x0040AE90


Packet 0x001C
	TemplateSize: 3

	Template: 0x0000001C 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0x1c
	{
		const short Header = 0x1c;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x0040B570


Packet 0x001D
	TemplateSize: 4

	Template: 0x0000001D 0x00000404 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0x1d
	{
		const short Header = 0x1d;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x0040B590


Packet 0x001E
	TemplateSize: 10

	Template: 0x0000001E 0x00000404 0x00000404 0x00000404 
		0x00000404 0x00000404 0x00000404 0x00000404 0x00000404 
		0x00000404 

	DecodedTemplate: 
	struct Packet_0x1e
	{
		const short Header = 0x1e;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x0040B5E0


Packet 0x001F
	TemplateSize: 6

	Template: 0x0000001F 0x00000404 0x0000102B 0x00000006 
		0x0000102B 0x00000006 

	DecodedTemplate: 
	struct Packet_0x1f
	{
		const short Header = 0x1f;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		short length;	//MaxLength: 16		//Size in Packet: 4 bytes
		DWORD[length]	//MaxLength: 16		//Size in Packet: 4 * length bytes MaxSize in Packet: 64bytes
		short length;	//MaxLength: 16		//Size in Packet: 4 bytes
		DWORD[length]	//MaxLength: 16		//Size in Packet: 4 * length bytes MaxSize in Packet: 64bytes
	}


	Handler: 0x0040B640


Packet 0x0020
	TemplateSize: 6

	Template: 0x00000020 0x00000404 0x00000204 0x00000104 
		0x00000104 0x00001417 

	DecodedTemplate: 
	struct Packet_0x20
	{
		const short Header = 0x20;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 20		//Size in Packet: 4 bytes
		wchar_t[20]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x0040B250


Packet 0x0021
	TemplateSize: 6

	Template: 0x00000021 0x00000404 0x00000204 0x00000104 
		0x00000104 0x00001417 

	DecodedTemplate: 
	struct Packet_0x21
	{
		const short Header = 0x21;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		WORD	//Mask: 0x0000ffff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		BYTE	//Mask: 0x000000ff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 20		//Size in Packet: 4 bytes
		wchar_t[20]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x0040B270


Packet 0x0022
	TemplateSize: 3

	Template: 0x00000022 0x00000404 0x00000C05 

	DecodedTemplate: 
	struct Packet_0x22
	{
		const short Header = 0x22;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE[12]		//Size in Packet: 12 bytes
	}


	Handler: 0x0040B690


Packet 0x0023
	TemplateSize: 7

	Template: 0x00000023 0x00000404 0x00000404 0x00001005 
		0x00001005 0x00001005 0x00001017 

	DecodedTemplate: 
	struct Packet_0x23
	{
		const short Header = 0x23;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		BYTE[16]		//Size in Packet: 16 bytes
		BYTE[16]		//Size in Packet: 16 bytes
		BYTE[16]		//Size in Packet: 16 bytes
		//short string_length;	//MaxLength: 16		//Size in Packet: 4 bytes
		wchar_t[16]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x0040B5B0


Packet 0x0024
	TemplateSize: 7

	Template: 0x00000024 0x00000404 0x00000404 0x00000404 
		0x00000417 0x00001417 0x00001017 

	DecodedTemplate: 
	struct Packet_0x24
	{
		const short Header = 0x24;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		//short string_length;	//MaxLength: 4		//Size in Packet: 4 bytes
		wchar_t[4]		//Size in Packet: 2 * string_length bytes
		//short string_length;	//MaxLength: 20		//Size in Packet: 4 bytes
		wchar_t[20]		//Size in Packet: 2 * string_length bytes
		//short string_length;	//MaxLength: 16		//Size in Packet: 4 bytes
		wchar_t[16]		//Size in Packet: 2 * string_length bytes
	}


	Handler: 0x0040B610


Packet 0x0025
	TemplateSize: 0

	Template: 

	DecodedTemplate: 


	Handler: 0x00000000


Packet 0x0026
	TemplateSize: 3

	Template: 0x00000026 0x00000404 0x00000404 

	DecodedTemplate: 
	struct Packet_0x26
	{
		const short Header = 0x26;		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
		DWORD	//Mask: 0xffffffff		//Size in Packet: 4 bytes
	}


	Handler: 0x0040B670


